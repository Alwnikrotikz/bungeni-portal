Notifications
=============

  >>> from bungeni.core.workflows import questionnotification as notification
  >>> from zope.component.interfaces import ObjectEvent

Setup mock delivery component.

  >>> import zope.sendmail.interfaces
  
  >>> class MockMailDelivery(object):
  ...     interface.implements(zope.sendmail.interfaces.IMailDelivery)
  ...
  ...     def send(self, *args):
  ...         print "From: %s\nTo: %s\n\n%s" % args

  >>> component.provideUtility(MockMailDelivery())

Set up a user.

  >>> from bungeni.core.domain import User
  >>> user = User()
  >>> user.first_name = u'John'
  >>> user.last_name = u'Doe'
  >>> user.email = 'john.doe@localhost'
  >>> user.owner_id = 1
  
  >>> from ore.alchemist import Session
  >>> session = Session()
  >>> session.save(user)
  >>> session.flush()
  
Questions
---------

  >>> from bungeni.core.domain import Question
  >>> question = Question()
  >>> question.subject = u"My subject"
  >>> question.owner_id = user.user_id
  >>> question.receive_notification = False
  
Question received.
  
  >>> notification.sendNotificationToMemberUponReceipt(ObjectEvent(question))

Let's change our setting for receive notification so an email message
is dispatched.

  >>> question.receive_notification = True
  >>> notification.sendNotificationToMemberUponReceipt(ObjectEvent(question))
  From: clerks.office@parliament.gov.ke
  To: "John Doe" <john.doe@localhost>...
  Subject: Question received: My subject...
  
  
  
