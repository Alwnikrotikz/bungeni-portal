<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Common" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit 

Sub Main

rem EmbedGraphic ThisComponent, &quot;file:///e:/default_logo.jpg&quot;

rem AddImageIntoSection &quot;prayers&quot;, &quot;e:\default_logo.jpg&quot; 


rem SetReferenceInputFieldValue(&quot;debaterecord_official_date&quot;, &quot;2033-03-01&quot;, &quot;root&quot;)
rem	AddTextToSection &quot;prayers&quot;, &quot;some text&quot;, &quot;Heading 1&quot;
rem	AddTextToSection &quot;prayers&quot;, &quot;&lt;parabreak&gt;&quot;, &quot;Heading 1&quot;
rem	AddTextToSection &quot;prayers&quot;, &quot;some text 2&quot;, &quot;Heading 2&quot;
rem	AddTextToSection &quot;prayers&quot;, &quot;&lt;parabreak&gt;&quot;, &quot;Heading 2&quot;
	rem SetInputFieldValue &quot;test_field&quot;, &quot;new value&quot;
	rem SetDocumentProperty &quot;bungeni_document_type&quot;, &quot;debaterecord&quot;
	
rem Dim vCurs
rem vCurs = ThisComponent.CurrentController.getViewCursor()
rem Dim oTCurs
rem oTCurs = ThisComponent.getText().createTextCursorByRange(vCurs.getStart())
rem oTCurs.CharWeight = com.sun.star.awt.FontWeight.BOLD

rem ThisComponent.getText().InsertString(oTCurs, &quot;THIS IS SOME TEXT&quot;, FALSE)
	
rem	AddTextToSection &quot;question-1&quot;, &quot;Banditry Menace in Galole&quot;, &quot;agenda&quot;
rem	AddTextToSection &quot;question-1&quot;, &quot;&lt;parabreak&gt;&quot;, &quot;&quot;
rem	AddTextToSectionWithCharStyle &quot;question-1&quot;, &quot;Mr.Kofa&quot;, &quot;question&quot;, com.sun.star.awt.FontWeight.BOLD 
rem	AddTextToSection &quot;question-1&quot;, &quot; : Ministry of Tourism&quot;, &quot;question&quot;

rem SearchAndReplace &quot;Some Text&quot;, &quot;This Text&quot;
rem AddSectionInsideSection &quot;qa&quot;, &quot;question4&quot;
rem InsertHTMLDocumentIntoSection &quot;Section1&quot;, &quot;e:\htmlFragment.html&quot;, &quot;Heading 1&quot;
rem dim oSect
rem oSect = ThisComponent.getTextSections().getByName(&quot;Section1&quot;)

rem  	InsertDocumentIntoSection &quot;Section1&quot;, &quot;E:\projects\WorkingProjects\BungeniEditorClient\dist\settings\fragments\new_hansard_question.odt&quot;
rem  	SearchAndReplace2 &quot;[[QUESTION_TITLE]]&quot;, &quot;new text&quot;
  	
rem AddAttributesToContainer (oSect.UserDefinedAttributes, ArrNames(), ArrValues() )

rem SearchAndReplace2 &quot;less&quot;, &quot;more&quot;, arr(), &quot;myurl&quot;

rem section metadata tests
 dim arrAttrNames(), arrAttrValues()

rem arrAttrNames = Array (&quot;mpName&quot;, &quot;mpURI&quot;, &quot;mpStatus&quot;)
rem arrAttrValues = Array (&quot;Kumar Sekar&quot;, &quot;ken.mp.1989-02-02&quot;, &quot;Deceased&quot;)

rem SetSectionMetadata &quot;NewName&quot;, arrAttrNames, arrAttrValues

rem arrAttrNames = Array (&quot;mpName&quot;, &quot;mpURI&quot;, &quot;mpStatus&quot;)
rem arrAttrValues = Array (&quot;Raila Odinga&quot;, &quot;ken.mp.1993-02-1&quot;, &quot;Alive&quot;)


rem SetSectionMetadata &quot;NewName2&quot;, arrAttrNames, arrAttrValues

 arrAttrNames = Array (&quot;mpInnerName&quot;, &quot;mpInnerURI&quot;, &quot;mpInnerStatus&quot;)
 arrAttrValues = Array (&quot;Mp Inside Another MP&quot;, &quot;ken.mp.1998-02-29&quot;, &quot;Insider&quot;)


SetSectionMetadata &quot;NewName5&quot;, arrAttrNames, arrAttrValues


End Sub

      
Sub Main2 
	rem AddTextToSection &quot;prayers&quot;, &quot;text&quot;, &quot;myStyle&quot;
	Dim strValue as string
	strValue = ThisComponent.DocumentInfo.getPropertyValue(&quot;MyPropertyName&quot;)
	Msgbox strValue
	
Dim vEnum
  Dim vVal
  Dim s1$, s2$
  Dim sFieldName$, sFieldValue$, sInstanceName$, sHint$, sContent$
  
  vEnum = thisComponent.getTextFields().createEnumeration()
  If Not IsNull(vEnum) Then
    Do While vEnum.hasMoreElements()
      vVal = vEnum.nextElement()
      If vVal.supportsService(&quot;com.sun.star.text.TextField.Input&quot;) Then
      		XRay vVal
      		Msgbox &quot;Hint = &quot;+ vVal.Hint
      		Msgbox &quot;Content = &quot; + vVal.Content
      end If
    Loop
  End if
   
End Sub

Function CursorInSection () as String
	Dim oVCurs
	CursorInSection = &quot;&quot;
  	oVCurs = ThisComponent.getCurrentController().getViewCursor()

  	If IsEmpty(oVCurs.TextSection) Then
   		&apos;cursor not in a section...
   		CursorInSection = &quot;&quot;
  	Else
  		Dim secObj 
  		secObj = oVCurs.TextSection
  		CursorInSection = secObj.Name
  End If	
  
End Function



Sub AddTextToSection (sectionName as String, strText as String, strStyle as String)
 Dim oSect
  Dim sName$
  Dim oVC
  Dim oText
  Dim oCols
  Dim s$
  sName = sectionName
  If ThisComponent.getTextSections().hasByName(sName) Then
  	  oSect = ThisComponent.getTextSections().getByName(sName)
       rem XRay oSect
  	    Dim sectionText , sectionCurs
    	sectionCurs = ThisComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
        if (strText = &quot;&lt;parabreak&gt;&quot; ) then
 	       InsertParaBreak(endCursor)
        else
 	     	InsertString(endCursor, strText, strStyle)
      	end if
    	REM Insert a new paragraph and select it
    	rem sectionText.insertControlCharacter(sectionCurs, _
    	rem com.sun.star.text.ControlCharacter.LINE_BREAK, False)
    	rem   sectionText.insertString(sectionCurs, &quot;one more hello world&quot;, false)
      	rem sectionCurs.ParaStyleName = &quot;Heading 2&quot;
  End If
    
End Sub



Sub AddTextToSectionWithCharStyle (sectionName as String,  strText as String,  strStyle as String, charWeight as Single )
 Dim oSect
  Dim sName$
  Dim oVC
  Dim oText
  Dim oCols
  Dim s$
  sName = sectionName
  If ThisComponent.getTextSections().hasByName(sName) Then
  	  oSect = ThisComponent.getTextSections().getByName(sName)
       rem XRay oSect
  	    Dim sectionText , sectionCurs
    	sectionCurs = ThisComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
  	    InsertWeightedString(endCursor, strText, strStyle, charWeight)
  	 	REM Insert a new paragraph and select it
    	rem sectionText.insertControlCharacter(sectionCurs, _
    	rem com.sun.star.text.ControlCharacter.LINE_BREAK, False)
    	rem   sectionText.insertString(sectionCurs, &quot;one more hello world&quot;, false)
      	rem sectionCurs.ParaStyleName = &quot;Heading 2&quot;
  End If
    
End Sub

Sub AddSectionInsideSectionWithAttributes ( innerSection as String, newSection as String, AttNames() as String, AttValues() as com.sun.star.xml.AttributeData)
 Dim oSect
  If ThisComponent.getTextSections().hasByName(innerSection) Then
  	  oSect = ThisComponent.getTextSections().getByName(innerSection)
       rem XRay oSect
  	    Dim sectionText , sectionCurs
    	sectionCurs = ThisComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
        Dim newSect, oCols
        newSect = ThisComponent.createInstance(&quot;com.sun.star.text.TextSection&quot;)
   		newSect.setName(newSection)
   		REM Now, create the columns...
     	oCols = ThisComponent.createInstance(&quot;com.sun.star.text.TextColumns&quot;)
    	oCols.setColumnCount(1)
    	newSect.TextColumns = oCols
    	newSect.UserDefinedAttributes = AddAttributesToContainer (newSect.UserDefinedAttributes, AttNames(), AttValues() )
        endCursor.getText().insertTextContent( endCursor, newSect, false)
        
        Dim oPar
        oPar = ThisComponent.createInstance(&quot;com.sun.star.text.Paragraph&quot;) 
        
        endCursor.getText().insertTextContentAfter (oPar, newSect)
  End If


End Sub


Sub AddSectionInsideSection ( innerSection as String,  newSection as String )
  Dim oSect
  If ThisComponent.getTextSections().hasByName(innerSection) Then
  	  oSect = ThisComponent.getTextSections().getByName(innerSection)
       rem XRay oSect
  	    Dim sectionText , sectionCurs
    	sectionCurs = ThisComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
        Dim newSect, oCols
        newSect = ThisComponent.createInstance(&quot;com.sun.star.text.TextSection&quot;)
   		newSect.setName(newSection)
   		REM Now, create the columns...
     	oCols = ThisComponent.createInstance(&quot;com.sun.star.text.TextColumns&quot;)
    	oCols.setColumnCount(1)
    	newSect.TextColumns = oCols
        endCursor.getText().insertTextContent( endCursor, newSect, false)
        
        Dim oPar
        oPar = ThisComponent.createInstance(&quot;com.sun.star.text.Paragraph&quot;) 
        
        endCursor.getText().insertTextContentAfter (oPar, newSect)
  End If

End Sub

Sub AddSectionInsideSectionWithStyle ( innerSection as String,  newSection as String, backgroundColor as Long, sectionLeftIndentInches as Single )
  Dim oSect
  If ThisComponent.getTextSections().hasByName(innerSection) Then
  	  oSect = ThisComponent.getTextSections().getByName(innerSection)
       rem XRay oSect
  	    Dim sectionText , sectionCurs
    	sectionCurs = ThisComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
        Dim newSect, oCols
        newSect = ThisComponent.createInstance(&quot;com.sun.star.text.TextSection&quot;)
   		newSect.setName(newSection)
   		REM Now, create the columns...
     	oCols = ThisComponent.createInstance(&quot;com.sun.star.text.TextColumns&quot;)
    	oCols.setColumnCount(1)
    	newSect.TextColumns = oCols
    	newSect.BackColor = backgroundColor
    	newSect.SectionLeftMargin = sectionLeftIndentInches * 10 * 254
        endCursor.getText().insertTextContent( endCursor, newSect, false)
        
        Dim oPar
        oPar = ThisComponent.createInstance(&quot;com.sun.star.text.Paragraph&quot;) 
        
        endCursor.getText().insertTextContentAfter (oPar, newSect)
  End If

End Sub

Sub InsertHTMLDocumentIntoSection(sName$, sFileUrl$ , sStyleApply$)
 sFileUrl = ConvertToURL(sFileUrl)
   rem now iterate through the section 
  Dim oSect
  Dim viewCur 
  
  viewCur = ThisComponent.currentcontroller.getviewcursor
  
  If ThisComponent.getTextSections().hasByName(sName) Then
  	  oSect = ThisComponent.getTextSections().getByName(sName)
       rem XRay oSect
       
  	    Dim sectionText , sectionCurs
    	sectionCurs = ThisComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
        
        Dim loadingProperty()
        loadingProperty = Array(MakePropertyValue(&quot;FilterName&quot;, &quot;HTML (StarWriter)&quot;))
        endCursor.insertDocumentFromURL(sFileURL, loadingProperty)
        if (Len(sStyleApply) &lt;&gt;  0 ) then 
        	endCursor.ParaStyleName = sStyleApply
        End If
  End If
 

End Sub

Function SetAttributeData (uda as Object, cAttributeName as String, cAttributeValue as String) 
	Dim oMyAttribute 
 &apos; Is there already an attribute with the desired name? 
   If uda.hasByName( cAttributeName ) Then 
      &apos; Get the existing attribute. 
      oMyAttribute = uda.getByName( cAttributeName ) 
      &apos; Update the value. 
      oMyAttribute.Value = cAttributeValue 
   Else 
      &apos; Create a new attribute. 
      oMyAttribute = createUnoStruct( &quot;com.sun.star.xml.AttributeData&quot; ) 
      With oMyAttribute 
         .Type = &quot;CDATA&quot; 
         .Value = cAttributeValue 
      End With 
      uda.insertByName( cAttributeName, oMyAttribute ) 
   
   EndIf 
   
   setAttributeData = uda
   
End Function


Sub SetSectionMetadata (sectionName as String, attrNames() , attrValues() )
	Dim oDoc
	oDoc = ThisComponent
	Dim sect
	sect = oDoc.getTextSections().getByName(sectionName)
	Dim uda
	uda = sect.UserDefinedAttributes
	Dim i as integer
	
	For i = LBound(attrNames) to UBound(attrNames)
		
		 SetAttributeData(uda, attrNames(i), attrValues(i) )
		
	Next

   &apos; Assign the modified container of attributes back to the shape. 
   sect.UserDefinedAttributes = uda 	


End Sub



Sub RenameSection (renameThisSection as String, renameToSection as String)
	Dim oDoc 
	oDoc = ThisComponent
	
	Dim sectRename
	sectRename = oDoc.getTextSections().getByName(renameThisSection)
	if (sectRename.IsProtected ) then
		sectRename.IsProtected = False
	End if
	sectRename.setName(renameToSection)
	sectRename.IsProtected = True
End Sub

Sub InsertDocumentIntoSection(sName$, sFileUrl$)
  
   sFileUrl = ConvertToURL(sFileUrl)
   rem now iterate through the section 
  Dim oSect
  If ThisComponent.getTextSections().hasByName(sName) Then
  	  oSect = ThisComponent.getTextSections().getByName(sName)
       rem XRay oSect
  	    Dim sectionText , sectionCurs
    	sectionCurs = ThisComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
        endCursor.insertDocumentFromURL(sFileURL, Array())
  End If
 
End Sub



Sub SetInputFieldValue (hintName as String, hintValue as String)
  Dim vEnum
  Dim vVal
  Dim s1$, s2$
  Dim sFieldName$, sFieldValue$, sInstanceName$, sHint$, sContent$
  
  vEnum = thisComponent.getTextFields().createEnumeration()
  If Not IsNull(vEnum) Then
    Do While vEnum.hasMoreElements()
      vVal = vEnum.nextElement()
      If vVal.supportsService(&quot;com.sun.star.text.TextField.Input&quot;) Then
      		if (vVal.Hint = hintName ) then 
      			rem hint name exists 
      			rem set hint name to new value
      			vVal.Content = hintValue
      		end if 
      end If
    Loop
  End if
  ThisComponent.TextFields.refresh()
End Sub

Sub SetReferenceInputFieldValue (hintName as String, placeHolder as string, unprotectSection as string)
  Dim vEnum
  Dim vVal
  
  vEnum = thisComponent.getTextFields().createEnumeration()
  
  Dim sect 
  if (unprotectSection &lt;&gt; &quot;&quot; ) then 
 	 sect = ThisComponent.getTextSections().getByName(unprotectSection)
  	 sect.IsProtected = False
  end if 
  
  If Not IsNull(vEnum) Then
    Do While vEnum.hasMoreElements()
      vVal = vEnum.nextElement()
      If vVal.supportsService(&quot;com.sun.star.text.TextField.JumpEdit&quot;) Then
      		if (vVal.Hint = hintName ) then 
      		
      			rem hint name exists 
      			rem set hint name to new value
      			vVal.PlaceHolder = placeHolder
      		    vVal.update
      		end if 
      end If
    Loop
  End if
  
  if (unprotectSection &lt;&gt; &quot;&quot;) then
  	sect.IsProtected = True
  end if
End Sub

Sub EmbedGraphic(oDoc, sURL$)
  REM Author: Stephan Wunderlich
  Dim oShape
  Dim oGraph     &apos;The graphic object is text content.
  Dim oProvider  &apos;GraphicProvider service.
  Dim oText
  Dim s$

  s = &quot;com.sun.star.drawing.GraphicObjectShape&quot;
  oShape = oDoc.createInstance(s)
  oGraph = oDoc.createInstance(&quot;com.sun.star.text.GraphicObject&quot;)

  oDoc.getDrawPage().add(oShape)

  oProvider = createUnoService(&quot;com.sun.star.graphic.GraphicProvider&quot;)

  Dim oProps(0) as new com.sun.star.beans.PropertyValue
  oProps(0).Name  = &quot;URL&quot;
  oProps(0).Value = sURL

  oShape.Graphic = oProvider.queryGraphic(oProps())
  oGraph.graphicurl = oShape.graphicurl
  oGraph.Width = 350 * 15
  oGraph.Height = 71 * 15
  oText= oDoc.getText()

  &apos; Insert at the current cursor location
  Dim oVC : oVC = oDoc.getCurrentController().getViewCursor()
  oText.insertTextContent(oVC, oGraph, false)

  &apos; We no longer require the shape object.
  oDoc.getDrawPage().remove(oShape)
End Sub

Sub SetDocumentProperty (propertyName as string, propertyValue as string)
       XRay thisComponent.DocumentInfo
	if (Not thisComponent.DocumentInfo.getPropertySetInfo().hasPropertyByName(propertyName) ) then
		thisComponent.Documentinfo.AddProperty(propertyName , 0, propertyValue)
	else
		Msgbox thisComponent.DocumentInfo.getPropertyValue(propertyName)
	end if
End Sub

Sub AddImageIntoSection(sectionName$, sURL$)
  Dim oShape
  Dim oGraph     &apos;The graphic object is text content.
  Dim oProvider  &apos;GraphicProvider service.
  Dim oText
  Dim s$
  Dim oDoc 
  Dim sName as string
  sName = sectionName 
  oDoc = ThisComponent

  sURL = ConvertToURL(sURL)
  
  s = &quot;com.sun.star.drawing.GraphicObjectShape&quot;
  oShape = oDoc.createInstance(s)
  oGraph = oDoc.createInstance(&quot;com.sun.star.text.GraphicObject&quot;)

  oDoc.getDrawPage().add(oShape)

  oProvider = createUnoService(&quot;com.sun.star.graphic.GraphicProvider&quot;)

  Dim oProps(0) as new com.sun.star.beans.PropertyValue
  oProps(0).Name  = &quot;URL&quot;
  oProps(0).Value = sURL

  oShape.Graphic = oProvider.queryGraphic(oProps())
  oGraph.graphicurl = oShape.graphicurl
  oGraph.Width = 350 * 15
  oGraph.Height = 71 * 15
  
  rem now iterate through the section 
  Dim oSect
  If ThisComponent.getTextSections().hasByName(sName) Then
  	  oSect = ThisComponent.getTextSections().getByName(sName)
       rem XRay oSect
  	    Dim sectionText , sectionCurs
    	sectionCurs = ThisComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
        endCursor.getText().insertTextContent( endCursor, oGraph, False)
        
  End If
        
        
  rem oText= oDoc.getText()

  &apos; Insert at the current cursor location
  rem Dim oVC : oVC = oDoc.getCurrentController().getViewCursor()
  rem oText.insertTextContent(oVC, oGraph, false)

  &apos; We no longer require the shape object.
  oDoc.getDrawPage().remove(oShape)
End Sub

Sub InsertString( oCursor, cString , cStyle)
    Dim oText
   oText = oCursor.getText()
   oCursor.ParaStyleName = cStyle
   oText.insertString( oCursor, cString, True )

End Sub

Dim globalWeight as Single 

Sub InsertWeightedString(oCursor, cString, cStyle, cCharWeight) 
   Dim oText
   oText = oCursor.getText()
   oCursor.ParaStyleName = cStyle
   oCursor.CharWeight = cCharWeight
   oText.insertString( oCursor, cString, True )

End Sub

Sub InsertLineBreak( oCursor )
	Dim oText
   oText = oCursor.getText()
   oText.insertControlCharacter( oCursor, com.sun.star.text.ControlCharacter.LINE_BREAK, False )
End Sub

Sub InsertParaBreak( oCursor )
    Dim oText
   oText = oCursor.getText()
   oText.insertControlCharacter( oCursor, com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK, False )
End Sub

Sub InsertPageBreak( oCursor )
   Dim oText
   oText = oCursor.getText()
   oText.insertControlCharacter( oCursor, com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK, False )
   oCursor.BreakType = com.sun.star.style.BreakType.PAGE_BEFORE
End Sub 

Sub SetParagraphStyle
  Dim oSels As Object, oSel As Object, oText As Object
  Dim lSelCount As Long, lWhichSelection As Long
  Dim oLCurs As Object, oRCurs As Object
  
  oText = ThisComponent.Text
  oSels = ThisComponent.getCurrentSelection()
  lSelCount = oSels.getCount()
  For lWhichSelection = 0 To lSelCount - 1
    oSel = oSels.getByIndex(lWhichSelection)
    oSel.ParaStyleName = &quot;Heading 2&quot;
  Next
End Sub

Sub SearchAndReplace2 (searchFor as string, replaceWith as String, bookmarkRange(), URLStr as String)
    
    Dim oBookmarkBegin, oBookmarkEnd
    oBookmarkBegin = ThisComponent.getBookmarks().getByName(bookmarkRange(LBound(bookmarkRange))
    oBookmarkEnd = ThisComponent.getBookmarks().getByName(bookmarkRange(UBound(bookmarkRange))
 	
 	Dim beginAnchor, statCurs
    beginAnchor = oBookmarkBegin.getAnchor()
    statCurs = beginAnchor.getText().createTextCursorByRange(beginAnchor.getStart())
    statCurs.gotoRange(oBookmarkEnd.getAnchor().getStart(), true)
    Dim cursorStr as string
    cursorStr =  statCurs.getString()
    Dim newStr as String
    newStr = ReplaceSubstring(cursorStr, searchFor, replaceWith)
    statCurs.setString(newStr)
    statCurs.CharBackColor = RGB (255, 255, 192)
    statCurs.HyperLinkURL = &quot;#&quot;+ URLStr
    rem oBookmarkBegin.dispose()
    oBookmarkEnd.dispose()
    
End Sub

Sub InsertArrayAsBulletList (bookmarkAnchor as String, selectItemsArray() , listItemURIs()  )

	Dim oDoc,  oText, oCur
	Dim bookmarkBegin, beginAnchor
	oDoc = ThisComponent
	bookmarkBegin = oDoc.getBookmarks().getByName(bookmarkAnchor)
	beginAnchor = bookmarkBegin.getAnchor()
	
    oText = beginAnchor.getText()
    oCur=oText.createTextCursorByRange(beginAnchor.getStart())


	
	Dim i 
	
	For i=LBound(selectItemsArray) to UBound(selectItemsArray)
	  oCur.HyperLinkURL=&quot;http://akomantoso.org/resolver/&quot;+ listItemURIs(i)
	  oText.insertString(oCur,  selectItemsArray(i) , False)
	  &apos;oCur.CharWeight = com.sun.star.awt.FontWeight.BOLD
	  &apos;oCur.gotoEndOfSentence(False)
	  &apos;oCur.CharWeight = com.sun.star.awt.FontWeight.NORMAL 
 	  oText.insertControlCharacter(oCur, com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK, False)
	Next i
	
	Dim oNumRules
	
	oNumRules = ThisComponent.createInstance(&quot;com.sun.star.text.NumberingRules&quot;)

	Dim mLevel, k, vProperty
	
	mLevel = oNumRules.getByIndex(0)
	For k = LBound(mLevel) To UBound(mLevel)
          vProperty = mLevel(k)
          If (vProperty.Name = &quot;NumberingType&quot;) Then
            &apos;and give it the passed Format
            vProperty.Value = com.sun.star.style.NumberingType.CHAR_SPECIAL
            oNumRules.replaceByIndex(0, mLevel)
          End If 
          &apos;mLevel(k) = vProperty
	next

oCur.gotoPreviousParagraph(False)
	
oCur.gotoRange(beginAnchor.getStart(), true)
rem	Dim l
rem	For l=LBound(selectItemsArray) to UBound(selectItemsArray)
rem		oCur.gotoPreviousParagraph(True)
rem	Next l
oCur.setPropertyValue(&quot;NumberingRules&quot;, oNumRules)	


End Sub

Sub SearchAndReplace (searchFor as string, replaceWith as string)
	Dim oReplace
  	oReplace = ThisComponent.createReplaceDescriptor() 
  	oReplace.SearchCaseSensitive = True 
  	oReplace.SearchString = searchFor
    oReplace.ReplaceString = replaceWith 
    ThisComponent.ReplaceAll(oReplace)
    
End Sub


Sub SearchAndReplaceWithAttributes (searchFor as string, replaceWith as string, attrNames() as String, attrValues() as com.sun.star.xml.AttributeData)
	Dim oReplace
  	oReplace = ThisComponent.createReplaceDescriptor() 
  	oReplace.SearchCaseSensitive = True 
  	oReplace.SearchString = searchFor
    oReplace.ReplaceString = replaceWith 
    ThisComponent.ReplaceAll(oReplace)
    Dim viewCursor 
    viewCursor = ThisComponent.getCurrentController().getViewCursor()
    viewCursor.gotoStartofLine(true)
    viewCursor.TextUserDefinedAttributes = AddAttributesToContainer (viewCursor.TextUserDefinedAttributes, attrNames, attrValues)
    viewCursor.HyperLinkURL = &quot;URL: &quot;+ attrValues(0).Value + &quot; ; &quot; + attrValues(1).Value
    viewCursor.HyperLinkTarget =  &quot;URL: &quot;+ attrValues(0).Value + &quot; ; &quot; + attrValues(1).Value
    viewCursor.gotoEndofLine(false)
End Sub


Function MakePropertyValue( Optional cName As String, Optional uValue ) As com.sun.star.beans.PropertyValue
   Dim oPropertyValue As New com.sun.star.beans.PropertyValue
   If Not IsMissing( cName ) Then
      oPropertyValue.Name = cName
   EndIf
   If Not IsMissing( uValue ) Then
      oPropertyValue.Value = uValue
   EndIf
   MakePropertyValue() = oPropertyValue
End Function 



Function GetAttributeValue(AttributeContainer As com.sun.star.xml.AttributeContainer, AttributeName As String) As String
  Dim Attribute As Object

  GetAttributeValue = &quot;&quot;

  If AttributeContainer.hasByName(AttributeName) Then
    Attribute = AttributeContainer.getByName(AttributeName)
    GetAttributeValue = Attribute.Value
  End If
End Function

Function AddAttributesToContainer (AttributeContainer As com.sun.star.xml.AttributeContainer, _
 ArrNames() as String, Attributes() As com.sun.star.xml.AttributeData)
 
 Dim i as Integer

 
 For i = LBound(Attributes()) to UBound(Attributes()) 
 	if (AttributeContainer.hasByName (ArrNames(i)) ) then 
 		AttributeContainer.removeByName (ArrNames(i))
 		AttributeContainer.insertByName (ArrNames(i), Attributes(i))
 	else
 		AttributeContainer.insertByName (ArrNames(i), Attributes(i))
    end if 
    
 Next
 
 AddAttributesToContainer = AttributeContainer 
 
End Function
 
Function AddAttribute(AttributeContainer As com.sun.star.xml.AttributeContainer, _
 AttributeName As String, AttributeValue As String)
  Dim oMyAttribute, oMyAttribute2 As Object

  oMyAttribute = createUnoStruct(&quot;com.sun.star.xml.AttributeData&quot;)
  oMyAttribute2 = createUnoStruct(&quot;com.sun.star.xml.AttributeData&quot;)
  With oMyAttribute
    .Namespace = &quot;&quot;
    .Type = &quot;CDATA&quot;
    .Value = AttributeValue
  End With
  With oMyAttribute2
    .Namespace = &quot;&quot;
    .Type = &quot;CDATA&quot;
    .Value = CStr(Now)
  End With
    
  

  If AttributeContainer.hasByName(AttributeName) Then
    AttributeContainer.removeByName(AttributeName, oMyAttribute)
    AttributeContainer.insertByName(AttributeName, oMyAttribute)
    AttributeContainer.insertByName(&quot;docu-date&quot;, oMyAttribute2)
  
  Else
  
    AttributeContainer.insertByName(AttributeName, oMyAttribute)
      AttributeContainer.insertByName(&quot;docu-date&quot;, oMyAttribute2)
  
  End If

  AddAttribute = AttributeContainer
End Function


Function ReplaceSubstring(sourcestr As String, fromstr As String, tostr As String) As String
   &apos; This function replaces characters in a string. Take all the occurrences of &quot;fromstr&quot;
   &apos; in the source string and replace them with &quot;tostr&quot;
   Dim tempstr As String
   Dim convstr As String
   Dim i As Long
   Dim length As Long
   tempstr = sourcestr
   If Len(fromstr) = 0 Then
      ReplaceSubstring = sourcestr
      Exit Function
   End If
   If Instr(tostr, fromstr) &lt;&gt; 0 Then &apos; If, for example, &quot;\&quot; is being replaced with &quot;\\&quot;
      &apos; Find a character (or set) that is not in the source string.
      &apos; Try the extended characters (over 128 ASCII)
      i = 128
      length = 1
      convstr = &quot;&quot;
      While convstr = &quot;&quot;
         If Instr(tempstr, String$(length, Chr$(i))) = 0 Then convstr = String$(length, Chr$(i))
         i = i + 1
         If i = 256 Then &apos; If all the extended characters were in there
            length = length + 1 &apos; Start over, but try 2 extended characters (or 3 or 4)
            i = 128
         End If
      Wend
      &apos; Go through tempstr twice - once replacing fromstr with the computed
      &apos; string, then replacing the computed string with tostr
      While Instr(tempstr, fromstr) &lt;&gt; 0
         tempstr = Left(tempstr, Instr(tempstr, fromstr)-1) &amp; convstr _
         &amp; Mid(tempstr, Instr(tempstr, fromstr)+Len(fromstr))
      Wend
      While Instr(tempstr, convstr) &lt;&gt; 0
         tempstr = Left(tempstr, Instr(tempstr, convstr)-1) &amp; tostr _
         &amp; Mid(tempstr, Instr(tempstr, convstr)+Len(convstr))
      Wend
   Else &apos; It&apos;s a normal replace substring call - fromstr is not part of tostr
      While Instr(tempstr, fromstr) &lt;&gt; 0
         tempstr = Left(tempstr, Instr(tempstr, fromstr)-1) &amp; tostr _
         &amp; Mid(tempstr, Instr(tempstr, fromstr)+Len(fromstr))
      Wend
   End If
   ReplaceSubstring = tempstr
End Function



Const MOVESECTION_BEFORE = 0
Const MOVESECTION_AFTER = 1

Sub MoveSection (moveThisSection as string, fixedSection as string, beforeOrAfter as Integer)
   rem get handles
   Dim oDoc, oViewCurs, NoArg()
   oDoc = ThisComponent
   oViewCurs = ThisComponent.CurrentController.getViewCursor
   oText = oDoc.getText()
   
   rem Get all sections
   sections=oDoc.getTextSections()
   
   rem get handle to section that is to be moved
   Dim sectMoveThis, sectMoveThisRange
   Dim sectMoveThisBeginCurs, sectMoveThisEndCurs
   sectMoveThis = sections.getByName(moveThisSection)
   sectMoveThisRange = sectMoveThis.getAnchor()
   sectMoveThisBeginCurs = sectMoveThisRange.getText().createTextCursorByRange(sectMoveThisRange.getStart())
   
   rem sectMoveThisEndCurs = sectMoveThisRange.getText().createTextCursorByRange(sectMoveThisRange.getEnd())
   rem oViewCurs.gotoRange(sectMoveThisRange.getStart(), false)
   rem oViewCurs.gotoRange(sectMoveThisRange.getEnd(), true)
   
   rem select section to be moved
   oDoc.CurrentController.Select(sectMoveThisRange)
   
   rem create the DispatcherService 
   oDisp = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;) 
   rem copy the current selection to the clipboard. 
   oDisp.executeDispatch(ThisComponent.CurrentController, &quot;.uno:Copy&quot;, &quot;&quot;, 0, NoArg()) 
   &apos; section content in clipboard now....
   &apos; now remove the section and its contents
   &apos; and recreate it in another place
   rem save section backcolor, leftmargin and rightmargin
   rem we will set these back to the recreated section boilerplate
   Dim backColor, sectionLeft, sectionRight
   backColor = sectMoveThis.BackColor
   sectionLeft = sectMoveThis.SectionLeftMargin
   sectionRight = sectMoveThis.SectionRightMargin
   
   rem remove the section to be moved
   RemoveSectionAndContents moveThisSection
   
   rem get handle to section before which we are moving the first section 
   Dim sectFixed, sectFixedRange
   Dim sectFixedCurs 
   sectFixed = sections.getByName(fixedSection)
   sectFixedRange = sectFixed.getAnchor()
   sectFixedCurs = sectFixedRange.getText().createTextCursorByRange(sectFixedRange.getEnd())
   
   
   rem create new sectio with the same name, and identical properites
   dim newSect, newSectColumns, newPara
   newSect = oDoc.createInstance(&quot;com.sun.star.text.TextSection&quot;)
   newSect.setName (moveThisSection)
   newSectColumns = ThisComponent.createInstance(&quot;com.sun.star.text.TextColumns&quot;)
   newSectColumns.setColumnCount(1)
   newSect.TextColumns = newSectColumns
   newSect.BackColor=backColor
   newSect.SectionLeftMargin = sectionLeft
   newSect.SectionRightMargin = sectionRight
   rem we have to create a new paragraph first at the point where we want to insert the section
   rem this is to create a place where the cursor can go and paste the contents of the copied section
   newPara = ThisComponent.createInstance(&quot;com.sun.star.text.Paragraph&quot;)
   rem create paragraph
   if (beforeOrAfter = MOVESECTION_BEFORE ) Then
 	  oText.insertTextContentBefore ( newPara, sectFixed)
   Elseif (beforeOrAfter = MOVESECTION_AFTER ) Then 
   	  oText.InsertTextContentAfter (newPara, sectFixed)	
   End if
   
   rem select the section before which we want to move our section
   rem and goleft for  1 character, this will move the cursor to the point
   rem just before the section
  
   If (beforeOrAfter = MOVESECTION_BEFORE) Then
   
    oViewCurs.gotoRange(sectFixedRange.getStart(), false)
   	oViewCurs.goleft(1, false)
   
   ElseIf (beforeOrAfter = MOVESECTION_AFTER) Then
   
    oViewCurs.gotoRange(sectFixedRange.getEnd(), false)
    oViewCurs.goRight(1, false)
   
   End If
   
   rem insert the section at the currently moved cursor position
   oText.insertTextContent(oViewCurs, newSect, true)
   rem after creating the section, the cursor moves 1 character after
   rem the section, so we move one character to the left to move inside
   rem the newly created section
   oViewCurs.goLeft(1, false)
   rem now paste the previously copied section contents into the newly created section
   oDisp.executeDispatch(ThisComponent.CurrentController, &quot;.uno:Paste&quot;, &quot;&quot;, 0, NoArg()) 
 
   rem docText.insertTextContentBefore (newSect, sectFixed)
   rem oViewCurs.gotoRange(sectFixed.getStart() , false)
  rem sectFixedCurs =  sectFixedRange.getText().createTextCursorByRange(sectFixedRange.getStart())
  rem sectFixedCurs.goLeft(1, false)
  rem sectFixedCurs.getText().insertTextContent(sectFixedCurs, newSect, False)
  
   
End Sub 


Sub RemoveSectionAndContents (sectionName as string )

  Dim section as Object
  section = thisComponent.getTextSections().getByName(sectionName)
  &apos; make section visible to be able to remove its TextContents
  aTextRange=section.getAnchor()
  &apos; Remove all TextContent of the section
  xEnum = aTextRange.createContentEnumeration( &quot;com.sun.star.text.TextContent&quot; )
  While xEnum.hasMoreElements()
            &apos;print xEnum.nextElement().Name
            oText.removeTextContent(xEnum.nextElement())
  Wend
  &apos; remove text of section
 
  aTextRange.setString(&quot;&quot;)
   
  Dim rangeCursBegin
  rangeCurs = aTextRange.getText().createTextCursorByRange(aTextRange.getStart())
  rangeCurs.gotoRange(aTextRange.getEnd(), true)
  rangeCurs.setPropertyValue(&quot;ParaStyleName&quot;, &quot;Default&quot;)
  
  &apos; Remove the section
  ThisComponent.getText().removeTextContent(section)
  
End Sub
</script:module>