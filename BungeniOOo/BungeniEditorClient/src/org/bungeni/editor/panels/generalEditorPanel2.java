/*
 * generalEditorPanel.java
 *
 * Created on August 16, 2007, 4:06 PM
 */

package org.bungeni.editor.panels;

import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.net.URL;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeExpansionListener;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.ExpandVetoException;
import javax.swing.tree.TreePath;
import org.bungeni.editor.actions.toolbarAction;
import org.bungeni.editor.actions.toolbarActionGroup;
import org.bungeni.editor.actions.EditorActionFactory;
import org.bungeni.editor.actions.IEditorActionEvent;
import org.bungeni.ooo.OOComponentHelper;
import org.bungeni.db.BungeniClientDB;
import org.bungeni.utils.CommonTreeFunctions;
import org.bungeni.utils.Installation;
import org.bungeni.db.QueryResults;
import org.bungeni.db.SettingsQueryFactory;
import org.bungeni.utils.MessageBox;

/**
 *
 * @author  Administrator
 */
public class generalEditorPanel2 extends templatePanel implements ICollapsiblePanel , ActionListener {
    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(generalEditorPanel.class.getName());
    private OOComponentHelper ooDocument;    
    class BungeniJTree extends JTree {
	       public boolean isPathEditable(TreePath path) { 
    		if (isEditable()) { 
                       DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
                       Object obj =  node.getUserObject();
                       toolbarActionGroup grp; toolbarAction action;
                       if (obj instanceof toolbarAction) {
                        //   action = (toolbarAction) obj;
                           return false;
                       } else {
                          // grp = (toolbarActionGroup) obj;
                           return true;
                       }
         	}
  		return false;
		}   
  	}
    
    class BungeniActionTreeModelListener implements TreeModelListener {
    public void treeNodesChanged(TreeModelEvent evt) {
		System.out.println("Tree Nodes Changed Event");
		Object[] children = evt.getChildren();
                if (children == null ) {
                   // MessageBox.OK("here no children");
                   System.out.println("root changed...");
                   DefaultMutableTreeNode nd = (DefaultMutableTreeNode)evt.getTreePath().getLastPathComponent();
                   String s = (String) nd.getUserObject();
                   System.out.println("root = " + s);
                   return;
                }
                MessageBox.OK("here with children");
		int[] childIndices = evt.getChildIndices();
		for (int i = 0; i < children.length; i++) {
		    System.out.println("Index " + childIndices[i] + 
				       ", changed value: " + children[0]);
		}					
	    }
	    public void treeStructureChanged(TreeModelEvent evt) {
		System.out.println("Tree Structure Changed Event");
	    }
	    public void treeNodesInserted(TreeModelEvent evt) {
		System.out.println("Tree Nodes Inserted Event");
	    }
	    public void treeNodesRemoved(TreeModelEvent evt) {
		System.out.println("Tree Nodes Removed Event");
	    }
        
    }
   // JScrollPane generalEditorScrollPane;
   // JTree treeGeneralEditor;
    /** Creates new form generalEditorPanel */
    public generalEditorPanel2() {
        initComponents();
       // setLayout(new FlowLayout());
       // this.setSize(216,235);
      //  generalEditorScrollPane = new javax.swing.JScrollPane();
     //   generalEditorScrollPane.setSize(214,200);
       // treeGeneralEditor = new javax.swing.JTree();
       // generalEditorScrollPane.setViewportView(treeGeneralEditor);
       // add(generalEditorScrollPane);
        loadToolbarButtons2();
        initTree();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        generalEditorScrollPane = new javax.swing.JScrollPane();
        treeGeneralEditor = new BungeniJTree();

        generalEditorScrollPane.setViewportView(treeGeneralEditor);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, generalEditorScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(generalEditorScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setOOComponentHandle(OOComponentHelper ooComponent) {
        ooDocument = ooComponent;
    }

    public Component getObjectHandle() {
        return this;
    }



    public void actionPerformed(ActionEvent e) {
    }

    private void initButtons() {
        /*
        toolbarGeneralToolbar.setFloatable(false);
        //toolbarSectionButtons.setBorder(contentBorder);
        toolbarGeneralToolbar.setRollover(true);
        toolbarGeneralToolbar.setOpaque(false);
        JButton btnSectionPrayer = createButton("icon_01", "makePrayerSection", "Create a Prayer Section", "Prayer");
        toolbarGeneralToolbar.add(btnSectionPrayer);
        JButton btnSectionPaper = createButton("icon_02", "makePaperSection", "Create a Paper Section", "Paper");
        toolbarGeneralToolbar.add(btnSectionPaper);
        JButton btnNoticeOfMotion = createButton("icon_03", "makeNoticeOfMotionSection", "Create a Notice-of-Motion Section", "Notice of Motion");
        toolbarGeneralToolbar.add(btnNoticeOfMotion);
        JButton btnQuestionAnswerSection = createButton("icon_04", "makeQASection", "Create a Question-Answer Section", "Question Answer Section");
        toolbarGeneralToolbar.add(btnQuestionAnswerSection);
        JButton btnQuestionBlockSection = createButton("icon_05", "makeQuestionBlockSection", "Create a Question-Block Section", "Question Answer Section");
        toolbarGeneralToolbar.add(btnQuestionBlockSection);
        */ 
    }
    
    protected JButton createButton(String imageName, String actionCommand, String tooltipText, String altText){
        JButton btn = super.createButton( imageName,  actionCommand,  tooltipText,  altText);
        btn.addActionListener(this);
        return btn;
    }
    
    private void buildActionTree(String point) {
      //  static boolean bStart = false;
    }
    
   class treeGeneralEditorTreeWillExpandListener implements TreeWillExpandListener {
        public void treeWillExpand(TreeExpansionEvent evt) throws ExpandVetoException {
            JTree tree = (JTree)evt.getSource();
            TreePath path = evt.getPath();
            log.debug("tree will expand");
            // Cancel the operation if desired
            boolean veto = true;
            if (veto) {
                throw new ExpandVetoException(evt);
            }
        }
    
        public void treeWillCollapse(TreeExpansionEvent evt) throws ExpandVetoException {
            JTree tree = (JTree)evt.getSource();
    
            // Get the path that will be collapsed
            TreePath path = evt.getPath();
            log.debug("tree will collapse");
            // Cancel the operation if desired
            boolean veto = true;
            if (veto) {
                throw new ExpandVetoException(evt);
            }
        }
    }
    
    // Post-expansion/collapse event listener
    public class treeGeneralEditorTreeExpansionListener implements TreeExpansionListener {
        public void treeExpanded(TreeExpansionEvent evt) {
            JTree tree = (JTree)evt.getSource();
            // Get the path that was expanded
            TreePath path = evt.getPath();
        }
    
        public void treeCollapsed(TreeExpansionEvent evt) {
            JTree tree = (JTree)evt.getSource();
    
            // Get the path that was collapsed
            TreePath path = evt.getPath();
        }
    }


    class treeGeneralEditorSelectionListener implements MouseListener {
        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2){
            JTree tree = (JTree) e.getSource();
            int xCoord = e.getX() ; int yCoord = e.getY();
            TreePath path = tree.getPathForLocation(xCoord, yCoord);
            DefaultMutableTreeNode selNode = (DefaultMutableTreeNode)path.getLastPathComponent();
            toolbarAction selectedAction = (toolbarAction) selNode.getUserObject();
            IEditorActionEvent event = getEventClass(selectedAction);
            event.doCommand(ooDocument, selectedAction);
            }
        }

        public void mousePressed(MouseEvent e) {
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }
   
    }
    
    private void initTree(){
        DefaultTreeCellRenderer cellRenderer = new DefaultTreeCellRenderer();
        cellRenderer.setOpenIcon(null);
        cellRenderer.setLeafIcon(null);
        cellRenderer.setClosedIcon(null);
        treeGeneralEditor.setCellRenderer(cellRenderer);
        treeGeneralEditor.addMouseListener(new treeGeneralEditorSelectionListener());
        treeGeneralEditor.addTreeExpansionListener(new treeGeneralEditorTreeExpansionListener());
        treeGeneralEditor.addTreeWillExpandListener(new treeGeneralEditorTreeWillExpandListener());
    }
   
    
    public void loadToolbarButtons() {
        
        log.debug("in loadToolbarButtons");
        Installation install = new Installation();
        String installDirectory = install.getAbsoluteInstallDir();
        BungeniClientDB instance = new BungeniClientDB(installDirectory + File.separator + "settings" + File.separator + "db" + File.separator, "");
        toolbarAction rootAction = new toolbarAction("rootAction");
        DefaultMutableTreeNode rootNode= new DefaultMutableTreeNode(rootAction);
        if (instance.Connect()) {
            
            createToolNodes(rootNode, rootAction, instance );
            instance.EndConnect();
        }
        treeGeneralEditor.setModel(new DefaultTreeModel(rootNode));
       //
        CommonTreeFunctions.expandAll(treeGeneralEditor, true);
    }
    
    public void loadToolbarButtons2() {
        
        log.debug("in loadToolbarButtons");
        Installation install = new Installation();
        String installDirectory = install.getAbsoluteInstallDir();
        BungeniClientDB instance = new BungeniClientDB(installDirectory + File.separator + "settings" + File.separator + "db" + File.separator, "");
        toolbarAction rootAction = new toolbarAction("rootAction");
        DefaultMutableTreeNode rootNode= new DefaultMutableTreeNode(rootAction);
        toolbarActionGroup grp = new toolbarActionGroup("Create a Section", "Create a Section");
       JComboBox box = new JComboBox();
        if (instance.Connect()) {
            box = createToolActionNodes(rootNode, rootAction, instance);
            //createToolNodes(rootNode, rootAction, instance );
            instance.EndConnect();
        }
        DefaultCellEditor cellEditor = new DefaultCellEditor(box);
        treeGeneralEditor.setCellEditor(cellEditor);
        treeGeneralEditor.setModel(new DefaultTreeModel(rootNode));
        treeGeneralEditor.getModel().addTreeModelListener(new BungeniActionTreeModelListener());
        treeGeneralEditor.setEditable(true);
        CommonTreeFunctions.expandAll(treeGeneralEditor, true);
    }
   
     private JComboBox createToolActionNodes(DefaultMutableTreeNode baseNode, toolbarAction baseNodeAction, BungeniClientDB instance) {
        String actionParent = baseNodeAction.action_name();
           JComboBox box = new JComboBox();
        log.debug("createToolNodes for : " + actionParent);
       HashMap<String,Vector<Vector<String>>> results = new HashMap<String, Vector<Vector<String>>>();
       Vector<Vector<String>> resultRows = new Vector<Vector<String>>();
      // Vector<Vector> results = new Vector<Vector>();
        //DefaultMutableTreeNode child = new DefaultMutableTreeNode (addThisActionObject);
        
        //addToThisNode.add( child);
        log.debug("createToolActionNodes - query : " + SettingsQueryFactory.Q_FETCH_CHILD_TOOLBAR_ACTIONS(actionParent));
        results = instance.Query(SettingsQueryFactory.Q_FETCH_CHILD_TOOLBAR_ACTIONS(actionParent));
        log.debug("createToolActionNodes db results returned === "+ results.size());
        QueryResults query_results = new QueryResults(results);
        
        if (query_results.hasResults() ) {
             HashMap columns = query_results.columnNameMap();
             log.debug("createToolNodes: has children");
             //child actions are present
             //call the result nodes recursively...
             resultRows = query_results.theResults();
             toolbarActionGroup grp = new toolbarActionGroup("create a section", "create a section");
                 for (int i = 0 ; i < resultRows.size(); i++ ) {
                   //get the results row by row into a string vector
                   Vector<java.lang.String> tableRow = new Vector<java.lang.String>();
                   tableRow = resultRows.elementAt(i);
                   toolbarAction action = new toolbarAction(tableRow, columns );
                   
                    //DefaultMutableTreeNode child = new DefaultMutableTreeNode(action);
                   log.debug("adding node = " + action);
                   grp.addAction(action);
                   box.addItem(action);
                   //baseNode.add(child);
                   //log.debug("createToolNodes : recursing child nodes");
                   //createToolNodes (child, action, instance);
               }
              // DefaultMutableTreeNode child = new DefaultMutableTreeNode(grp);
              // baseNode.add(child);
        }
     
      return box;
     }
     
    private void createToolNodes(DefaultMutableTreeNode baseNode, toolbarAction baseNodeAction, BungeniClientDB instance) {
        try {
        String actionParent = baseNodeAction.action_name();
        log.debug("createToolNodes for : " + actionParent);
        HashMap<String,Vector<Vector<String>>> results = new HashMap<String, Vector<Vector<String>>>();
       Vector<Vector<String>> resultRows = new Vector<Vector<String>>();
         // Vector<Vector> results = new Vector<Vector>();
        //DefaultMutableTreeNode child = new DefaultMutableTreeNode (addThisActionObject);
        
        //addToThisNode.add( child);
        log.debug("createToolNodes - query : " + SettingsQueryFactory.Q_FETCH_CHILD_TOOLBAR_ACTIONS(actionParent));
        results = instance.Query(SettingsQueryFactory.Q_FETCH_CHILD_TOOLBAR_ACTIONS(actionParent));
        log.debug("db results returned === "+ results.size());
        QueryResults query_results = new QueryResults(results);
        if (query_results.hasResults())
            log.debug("last query returned results " + query_results.theResults().size());
        else
            log.debug ("last query did not return results " + query_results.theResults().size());
        HashMap columns = query_results.columnNameMap();
           
        if (query_results.hasResults() ) {
            log.debug("createToolNodes: has children");
            //child actions are present
            //call the result nodes recursively...
            resultRows = query_results.theResults();
               for (int i = 0 ; i < resultRows.size(); i++ ) {
                   //get the results row by row into a string vector
                   Vector<java.lang.String> tableRow = new Vector<java.lang.String>();
                   tableRow = resultRows.elementAt(i);
                   toolbarAction action = new toolbarAction(tableRow, columns );
                   DefaultMutableTreeNode child = new DefaultMutableTreeNode(action);
                   log.debug("adding node = " + action);
                   baseNode.add(child);
                   log.debug("createToolNodes : recursing child nodes");
                   createToolNodes (child, action, instance);
               }
        } 
        log.debug("createToolNodes : popping from recrusive level");
        return ;
        }
        catch (Exception e) {
            log.debug("createToolNodes excetopn:"+e.getMessage() );
            e.printStackTrace();
        } finally {
            return;
        }
    }

    public IEditorActionEvent getEventClass(toolbarAction action) {
        IEditorActionEvent event = EditorActionFactory.getEventClass(action);
        return event;
    }

    public void setParentWindowHandle(Component c) {
        //to be implemented...
    }

    

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane generalEditorScrollPane;
    private javax.swing.JTree treeGeneralEditor;
    // End of variables declaration//GEN-END:variables
    
}
