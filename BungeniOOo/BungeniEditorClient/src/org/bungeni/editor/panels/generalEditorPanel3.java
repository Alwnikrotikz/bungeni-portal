/*
 * generalEditorPanel.java
 *
 * Created on August 16, 2007, 4:06 PM
 */

package org.bungeni.editor.panels;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.net.URL;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.BoxLayout;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.ListCellRenderer;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeExpansionListener;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.ExpandVetoException;
import javax.swing.tree.TreePath;
import org.bungeni.editor.actions.toolbarAction;
import org.bungeni.editor.actions.toolbarActionGroup;
import org.bungeni.editor.actions.EditorActionFactory;
import org.bungeni.editor.actions.IEditorActionEvent;
import org.bungeni.ooo.OOComponentHelper;
import org.bungeni.db.BungeniClientDB;
import org.bungeni.utils.CommonTreeFunctions;
import org.bungeni.utils.Installation;
import org.bungeni.db.QueryResults;
import org.bungeni.db.SettingsQueryFactory;
import org.bungeni.utils.MessageBox;

/**
 *
 * @author  Administrator
 */
public class generalEditorPanel3 extends templatePanel implements ICollapsiblePanel , ActionListener {
    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(generalEditorPanel3.class.getName());
    private OOComponentHelper ooDocument;    
    private BungeniClientDB instance;
    private java.awt.GridBagConstraints constraints = new java.awt.GridBagConstraints();
   // JScrollPane generalEditorScrollPane;
   // JTree treeGeneralEditor;
    /** Creates new form generalEditorPanel */
    public generalEditorPanel3() {
        initComponents();
        listMarkupActions.setModel(new DefaultListModel());
        loadToolbarButtons2();
       // initTree();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        comboCreateSection = new javax.swing.JComboBox();
        generalEditorScrollpane = new javax.swing.JScrollPane();
        listMarkupActions = new javax.swing.JList();
        lblCreateSectionAction = new javax.swing.JLabel();
        lblSubActions = new javax.swing.JLabel();
        btnExecSelectedSection = new javax.swing.JButton();
        btnExecSelectedMarkup = new javax.swing.JButton();

        comboCreateSection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        listMarkupActions.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        generalEditorScrollpane.setViewportView(listMarkupActions);

        lblCreateSectionAction.setText("Create Section Actions....");

        lblSubActions.setText("Available Sub - Actions...");

        btnExecSelectedSection.setText("Create Selected Section");
        btnExecSelectedSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecSelectedSectionActionPerformed(evt);
            }
        });

        btnExecSelectedMarkup.setText("Make Selected Markup");
        btnExecSelectedMarkup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecSelectedMarkupActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblCreateSectionAction, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .add(comboCreateSection, 0, 196, Short.MAX_VALUE))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(btnExecSelectedSection)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(lblSubActions, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                        .add(37, 37, 37))
                    .add(layout.createSequentialGroup()
                        .add(generalEditorScrollpane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                        .addContainerGap())))
            .add(layout.createSequentialGroup()
                .add(56, 56, 56)
                .add(btnExecSelectedMarkup, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(lblCreateSectionAction)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(comboCreateSection, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnExecSelectedSection)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblSubActions)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(generalEditorScrollpane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(btnExecSelectedMarkup)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnExecSelectedMarkupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecSelectedMarkupActionPerformed
// TODO add your handling code here:
         toolbarAction action = (toolbarAction) comboCreateSection.getSelectedItem();
         if (action == null ) return ;
         IEditorActionEvent event = getEventClass(action);
         event.doCommand(ooDocument, action); 
    }//GEN-LAST:event_btnExecSelectedMarkupActionPerformed

    private void btnExecSelectedSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecSelectedSectionActionPerformed
// TODO add your handling code here:
        toolbarAction action = (toolbarAction) comboCreateSection.getSelectedItem();
        if (action == null ) return ;
          IEditorActionEvent event = getEventClass(action);
         event.doCommand(ooDocument, action);
    }//GEN-LAST:event_btnExecSelectedSectionActionPerformed

    public void setOOComponentHandle(OOComponentHelper ooComponent) {
        ooDocument = ooComponent;
    }

    public Component getObjectHandle() {
        return this;
    }




    private void initButtons() {
        /*
        toolbarGeneralToolbar.setFloatable(false);
        //toolbarSectionButtons.setBorder(contentBorder);
        toolbarGeneralToolbar.setRollover(true);
        toolbarGeneralToolbar.setOpaque(false);
        JButton btnSectionPrayer = createButton("icon_01", "makePrayerSection", "Create a Prayer Section", "Prayer");
        toolbarGeneralToolbar.add(btnSectionPrayer);
        JButton btnSectionPaper = createButton("icon_02", "makePaperSection", "Create a Paper Section", "Paper");
        toolbarGeneralToolbar.add(btnSectionPaper);
        JButton btnNoticeOfMotion = createButton("icon_03", "makeNoticeOfMotionSection", "Create a Notice-of-Motion Section", "Notice of Motion");
        toolbarGeneralToolbar.add(btnNoticeOfMotion);
        JButton btnQuestionAnswerSection = createButton("icon_04", "makeQASection", "Create a Question-Answer Section", "Question Answer Section");
        toolbarGeneralToolbar.add(btnQuestionAnswerSection);
        JButton btnQuestionBlockSection = createButton("icon_05", "makeQuestionBlockSection", "Create a Question-Block Section", "Question Answer Section");
        toolbarGeneralToolbar.add(btnQuestionBlockSection);
        */ 
    }
    
    protected JButton createButton(String imageName, String actionCommand, String tooltipText, String altText){
        JButton btn = super.createButton( imageName,  actionCommand,  tooltipText,  altText);
        btn.addActionListener(this);
        return btn;
    }
    
    class parentSectionSelectorListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            try {
            JComboBox cb = (JComboBox)e.getSource();
            toolbarAction action = (toolbarAction) cb.getSelectedItem();
            Vector<toolbarAction> actions = createChildActions(action);
             DefaultListModel model = new DefaultListModel();
            listMarkupActions.setModel(model);
        
            if (actions.size() > 0 ) {
                log.debug("Action " + action + " has child actions");
                
                for (int i = 0 ; i<actions.size(); i++ ) {
                    toolbarAction childAction = actions.elementAt(i);
                    model.addElement(childAction);
                }
               // parentRepaint();
            } else {
                log.debug("Action " + action + " does not have child actions");
            }
        } catch (Exception ex) {
            log.debug("exception in listbox handler : " + ex.getMessage());
            ex.printStackTrace();
        }
        }  
    }
 
   public class ListSubActionCellRenderer extends JLabel implements ListCellRenderer {
    private final Color HIGHLIGHT_COLOR = new Color(0, 0, 128);

    public ListSubActionCellRenderer( ) {
        setOpaque(true);
        setIconTextGap(12);
    }

    public Component getListCellRendererComponent(
        JList list,
        Object value,
        int index,
        boolean isSelected,
        boolean cellHasFocus)
    {
        String imageLocation  = "";
        toolbarAction entry = (toolbarAction)value;
        setText(entry.action_display_text());
        imageLocation = "/gui/"+ entry.action_type()+".gif";
        URL imageURL = generalEditorPanel3.class.getResource(imageLocation);
        setIcon(new ImageIcon(imageURL, ""));
        if(isSelected) {
            setBackground(HIGHLIGHT_COLOR);
            setForeground(Color.white);
        } else {
            setBackground(Color.white);
            setForeground(Color.black);
        }
        return this;
    }
}
   
   public Vector<toolbarAction> createChildActions(toolbarAction parentAction) {
       HashMap results = new HashMap();
       Vector<toolbarAction> actions = new Vector<toolbarAction>();
       instance.Connect();
       results =instance.Query(SettingsQueryFactory.Q_FETCH_CHILD_TOOLBAR_ACTIONS(parentAction.action_name()));
       instance.EndConnect();
       Vector<Vector> resultRows = new Vector<Vector>();
       QueryResults query_results = new QueryResults(results);
       if (query_results.hasResults()) {
             HashMap columns = query_results.columnNameMap();
             log.debug("createChildActions: has children");
             //child actions are present
             //call the result nodes recursively...
             resultRows = query_results.theResults();
                 for (int i = 0 ; i < resultRows.size(); i++ ) {
                   //get the results row by row into a string vector
                   Vector<java.lang.String> tableRow = new Vector<java.lang.String>();
                   tableRow = resultRows.elementAt(i);
                   toolbarAction action = new toolbarAction(tableRow, columns );
                    //DefaultMutableTreeNode child = new DefaultMutableTreeNode(action);
                   log.debug("adding node = " + action);
                   actions.add(action);
                   //baseNode.add(child);
                   //log.debug("createToolNodes : recursing child nodes");
                   //createToolNodes (child, action, instance);
               }
         
       }
       return actions;
   }
    public void loadToolbarButtons2() {
        //listMarkupActions.setCellRenderer(new ListSubActionCellRenderer());
        log.debug("in loadToolbarButtons");
        Installation install = new Installation();
        String installDirectory = install.getAbsoluteInstallDir();
        instance = new BungeniClientDB(installDirectory + File.separator + "settings" + File.separator + "db" + File.separator, "");
        toolbarAction rootAction = new toolbarAction("rootAction");
        comboCreateSection.removeAllItems();
        if (instance.Connect()) {
            createToolActionNodes( rootAction);
            //createToolNodes(rootNode, rootAction, instance );
            instance.EndConnect();
        }
        comboCreateSection.addActionListener(new parentSectionSelectorListener() );
   }
   
     private void createToolActionNodes(toolbarAction baseNodeAction) {
        String actionParent = baseNodeAction.action_name();
        log.debug("createToolNodes for : " + actionParent);
        HashMap results = new HashMap();
        Vector<Vector> resultRows = new Vector<Vector>();
       // Vector<Vector> results = new Vector<Vector>();
        //DefaultMutableTreeNode child = new DefaultMutableTreeNode (addThisActionObject);
        
        //addToThisNode.add( child);
        log.debug("createToolActionNodes - query : " + SettingsQueryFactory.Q_FETCH_CHILD_TOOLBAR_ACTIONS(actionParent));
        results = instance.Query(SettingsQueryFactory.Q_FETCH_CHILD_TOOLBAR_ACTIONS(actionParent));
        log.debug("createToolActionNodes db results returned === "+ results.size());
        QueryResults query_results = new QueryResults(results);
        
        if (query_results.hasResults() ) {
             HashMap columns = query_results.columnNameMap();
             log.debug("createToolNodes: has children");
             //child actions are present
             //call the result nodes recursively...
             resultRows = query_results.theResults();
             //toolbarActionGroup grp = new toolbarActionGroup("create a section", "create a section");
                 for (int i = 0 ; i < resultRows.size(); i++ ) {
                   //get the results row by row into a string vector
                   Vector<java.lang.String> tableRow = new Vector<java.lang.String>();
                   tableRow = resultRows.elementAt(i);
                   toolbarAction action = new toolbarAction(tableRow, columns );
                   comboCreateSection.addItem(action);
                    //DefaultMutableTreeNode child = new DefaultMutableTreeNode(action);
                   log.debug("adding node = " + action);
                   //baseNode.add(child);
                   //log.debug("createToolNodes : recursing child nodes");
                   //createToolNodes (child, action, instance);
               }
              // DefaultMutableTreeNode child = new DefaultMutableTreeNode(grp);
              // baseNode.add(child);
        }
     
      return ;
     }
     
  
    public IEditorActionEvent getEventClass(toolbarAction action) {
        IEditorActionEvent event = EditorActionFactory.getEventClass(action);
        return event;
    }

    public void setParentWindowHandle(Component c) {
        //to be implemented...
    }

    public void actionPerformed(ActionEvent e) {
        
    }

    

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExecSelectedMarkup;
    private javax.swing.JButton btnExecSelectedSection;
    private javax.swing.JComboBox comboCreateSection;
    private javax.swing.JScrollPane generalEditorScrollpane;
    private javax.swing.JLabel lblCreateSectionAction;
    private javax.swing.JLabel lblSubActions;
    private javax.swing.JList listMarkupActions;
    // End of variables declaration//GEN-END:variables
    
}
