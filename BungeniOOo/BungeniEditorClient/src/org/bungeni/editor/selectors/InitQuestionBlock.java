/*
 * InitQuestionBlock.java
 *
 * Created on August 31, 2007, 4:01 PM
 */

package org.bungeni.editor.selectors;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Set;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.JDialog;
import org.bungeni.db.BungeniClientDB;
import org.bungeni.db.BungeniRegistryFactory;
import org.bungeni.db.DefaultInstanceFactory;
import org.bungeni.db.GeneralQueryFactory;
import org.bungeni.db.QueryResults;
import org.bungeni.db.registryQueryDialog;
import org.bungeni.editor.actions.toolbarAction;
import org.bungeni.editor.fragments.FragmentsFactory;
import org.bungeni.editor.macro.ExternalMacro;
import org.bungeni.editor.macro.ExternalMacroFactory;
import org.bungeni.ooo.OOComponentHelper;
import org.bungeni.utils.MessageBox;
import org.safehaus.uuid.UUID;
import org.safehaus.uuid.UUIDGenerator;

/**
 *
 * @author  Administrator
 */
public class InitQuestionBlock extends javax.swing.JPanel implements IDialogSelector {
    private OOComponentHelper ooDocument;
    private JDialog parent;
    private BungeniClientDB dbInstance=null;
    private toolbarAction theAction;
    registryQueryDialog rqs;
    private SelectorDialogModes theMode;
    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(InitQuestionBlock.class.getName());
 
    HashMap<String, String> selectionData = new HashMap<String,String>();
    String txtURI = "";
    /** Creates new form InitQuestionBlock */
    public InitQuestionBlock() {
        initComponents();
    }
    public InitQuestionBlock(OOComponentHelper ooDocument, JDialog parentDlg, toolbarAction theAction) {
        initComponents();
        this.ooDocument = ooDocument;
        this.parent = parentDlg;
        this.theAction = theAction;
        initFields();
   
        HashMap<String,String> registryMap = BungeniRegistryFactory.fullConnectionString();  
        dbInstance = new BungeniClientDB(registryMap);
    }
   
    private void initFields() {

        if (theMode == SelectorDialogModes.TEXT_INSERTION) {
            txtAddressedTo.setEditable(false);
            txtPersonName.setEditable(true);
            txtQuestionText.setEditable(false);
            txtQuestionTitle.setEditable(false);
            txtMessageArea.setText("You are attempting to insert a new Question, " +
                    "please select a question, and edit the name if neccessary, the " +
                    "text of the question and the metadata will be inserted into the " +
                    "document");
        } else if (theMode == SelectorDialogModes.TEXT_SELECTED) {
            txtAddressedTo.setEditable(false);
            lblNameOfPersonFrom.setVisible(false);
            txtPersonName.setVisible(false); //setEditable(false);
            txtQuestionText.setEditable(false);
            txtQuestionTitle.setEditable(false);    
            txtMessageArea.setText("You are attempting to markup some existing text" +
                    " as a Question, " +
                    "please select the Question you would like to markup , and press apply" +
                    "to markup the selected text with the correct question metadata");
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        scrollQuestionText = new javax.swing.JScrollPane();
        txtQuestionText = new javax.swing.JTextArea();
        lblQuestionText = new javax.swing.JLabel();
        btnSelectQuestion = new javax.swing.JButton();
        txtQuestionTitle = new javax.swing.JTextField();
        lblQuestionTitle = new javax.swing.JLabel();
        txtPersonName = new javax.swing.JTextField();
        lblNameOfPersonFrom = new javax.swing.JLabel();
        btnApply = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtAddressedTo = new javax.swing.JTextField();
        lblQuestionAddressedTo = new javax.swing.JLabel();
        separatorLine1 = new javax.swing.JSeparator();
        scrollMessageArea = new javax.swing.JScrollPane();
        txtMessageArea = new javax.swing.JTextArea();

        txtQuestionText.setColumns(20);
        txtQuestionText.setFont(new java.awt.Font("Tahoma", 0, 10));
        txtQuestionText.setLineWrap(true);
        txtQuestionText.setRows(5);
        scrollQuestionText.setViewportView(txtQuestionText);

        lblQuestionText.setText("Question Text");

        btnSelectQuestion.setText("Select a Question...");
        btnSelectQuestion.setActionCommand("Select a Question");
        btnSelectQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectQuestionActionPerformed(evt);
            }
        });

        lblQuestionTitle.setText("Question Title ");

        lblNameOfPersonFrom.setText("Edit name of Person asking Question");

        btnApply.setText("Apply");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        btnCancel.setText("Close");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblQuestionAddressedTo.setText("Question Addressed To :");

        txtMessageArea.setBackground(new java.awt.Color(204, 204, 204));
        txtMessageArea.setColumns(20);
        txtMessageArea.setEditable(false);
        txtMessageArea.setFont(new java.awt.Font("Tahoma", 0, 11));
        txtMessageArea.setLineWrap(true);
        txtMessageArea.setRows(5);
        txtMessageArea.setWrapStyleWord(true);
        scrollMessageArea.setViewportView(txtMessageArea);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(btnApply, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 43, Short.MAX_VALUE)
                        .add(btnCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, scrollQuestionText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .add(lblQuestionText)
                    .add(txtAddressedTo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .add(lblQuestionAddressedTo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 265, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtPersonName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .add(lblNameOfPersonFrom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 264, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtQuestionTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .add(lblQuestionTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnSelectQuestion)
                    .add(separatorLine1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .add(scrollMessageArea, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(scrollMessageArea, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(separatorLine1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnSelectQuestion)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblQuestionTitle)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txtQuestionTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblNameOfPersonFrom)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txtPersonName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblQuestionAddressedTo)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txtAddressedTo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblQuestionText)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrollQuestionText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnApply)
                    .add(btnCancel))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
// TODO add your handling code here:
        parent.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void returnError (boolean state) {
        btnApply.setEnabled(state);
        btnCancel.setEnabled(state);
        btnSelectQuestion.setEnabled(state);
        return;
    }
    
    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt)  {//GEN-FIRST:event_btnApplyActionPerformed
// TODO add your handling code here:
        returnError(false);
        String AddressedTo = txtAddressedTo.getText();
        String PersonName = txtPersonName.getText();
        String QuestionText = txtQuestionText.getText();
        String QuestionTitle = txtQuestionTitle.getText();
        String URI = selectionData.get("URI");
        
        String QuestionId = theAction.action_naming_convention() +  selectionData.get("ID");
        
        //if (URI == null) URI = "";
        if (selectionData.size() == 0 ) {
            MessageBox.OK(parent, "Please select a question first!");
             returnError(true);
            return;
        }
       // if (URI.length() == 0 ) {
        //    MessageBox.OK(parent, "Please select a question first !");
         //   return;
       // }
        
        try {
        if (this.theMode == SelectorDialogModes.TEXT_SELECTED) {
            //insert mode
            //check if section by that name exists, fail immediately if true
            if (ooDocument.getTextSections().hasByName(QuestionId)) {
                MessageBox.OK(parent, "The Question: " + QuestionId+" already exists in the document !");
                returnError(true);
                return;
            }
            //now check if inside a question-section, if so fail immediately
            ExternalMacro cursorInSection = ExternalMacroFactory.getMacroDefinition("CursorInSection");
            Object retValue = ooDocument.executeMacro(cursorInSection.toString(), cursorInSection.getParams());
            String sectionNameExists = (String)retValue;
            if (sectionNameExists.startsWith("question")) {
                MessageBox.OK(parent, "You cannot insert a question inisde another, \n Please place the cursor in a different part of the document");
                returnError(true);
                return;
            }
            //now add the section
            ooDocument.addViewSection(QuestionId, new Integer(0xffffe1));
            //now add the section Content
            MessageBox.OK(parent, "The selected text was placed in a section , and marked up " +
                    "as: " + QuestionId + "\n Please highlight the name of the person making the speech to assigne their metadata");
            returnError(true);
            
        } else if (this.theMode == SelectorDialogModes.TEXT_INSERTION) {
            
             if (ooDocument.getTextSections().hasByName(QuestionId)) {
                MessageBox.OK(parent, "The Question: " + QuestionId+" already exists in the document !");
                returnError(true);
                return;
            }
            
            ExternalMacro cursorInSection = ExternalMacroFactory.getMacroDefinition("CursorInSection");
            Object retValue = ooDocument.executeMacro(cursorInSection.toString(), cursorInSection.getParams());
            String sectionNameExists = (String)retValue;
            if (sectionNameExists.startsWith("question")) {
                MessageBox.OK(parent, "You cannot insert a question inisde another, \n Please place the cursor in a different part of the document");
                returnError(true);
                return;
            }
            
            UUIDGenerator gen = UUIDGenerator.getInstance();
            UUID uuid = gen.generateTimeBasedUUID();
            String tmpFileName = uuid.toString().replaceAll("-", "")+".html";
            String pathToFile = DefaultInstanceFactory.DEFAULT_INSTALLATION_PATH() + File.separator+ "tmp" + File.separator;
                BufferedWriter out;
                    out = new BufferedWriter(new FileWriter(new File(pathToFile + tmpFileName)));
            out.write(QuestionText);
            out.close();
            log.debug("tmpFile Name = " + pathToFile+tmpFileName);
            //selection mode
            //insert mode
       
            //now add the section
            ooDocument.addViewSection(QuestionId, new Integer(0xffffe1));
            //now add the section Content
            //add question title into section
            ExternalMacro insertDocIntoSection = ExternalMacroFactory.getMacroDefinition("InsertDocumentIntoSection");
            insertDocIntoSection.addParameter(QuestionId)   ;
            insertDocIntoSection.addParameter(FragmentsFactory.getFragment("hansard_question"));
            ooDocument.executeMacro(insertDocIntoSection.toString(), insertDocIntoSection.getParams());
            //search replace title into question title marker
            ExternalMacro SearchAndReplace = ExternalMacroFactory.getMacroDefinition("SearchAndReplace");
            SearchAndReplace.addParameter("[[QUESTION_TITLE]]");
            SearchAndReplace.addParameter(QuestionTitle);
            ooDocument.executeMacro(SearchAndReplace.toString(), SearchAndReplace.getParams());
            //add sub section (numbered serially) and 
            String newSectionName = QuestionId + "-que1" ;
            int nCounter = 1;
            while (ooDocument.getTextSections().hasByName(newSectionName) ) {
                nCounter++;
                newSectionName = QuestionId+"-que"+nCounter;
            }
            ExternalMacro AddSectionInsideSection = ExternalMacroFactory.getMacroDefinition("AddSectionInsideSection");
            AddSectionInsideSection.addParameter(QuestionId);
            AddSectionInsideSection.addParameter(newSectionName);
            ooDocument.executeMacro(AddSectionInsideSection.toString(), AddSectionInsideSection.getParams());
            //import sub section fragment
            insertDocIntoSection.clearParams();
            insertDocIntoSection.addParameter(newSectionName);
            insertDocIntoSection.addParameter(FragmentsFactory.getFragment("hansard_question_text"));
            ooDocument.executeMacro(insertDocIntoSection.toString(), insertDocIntoSection.getParams());
            //search and replace into fragment
            SearchAndReplace.clearParams();
            SearchAndReplace.addParameter("[[QUESTION_FROM]]");
            SearchAndReplace.addParameter(PersonName);
            ooDocument.executeMacro(SearchAndReplace.toString(), SearchAndReplace.getParams());
      
            //SearchAndReplace.clearParams();
            //SearchAndReplace.addParameter("[[QUESTION_TEXT]]");
            //SearchAndReplace.addParameter(QuestionText);
            //ooDocument.executeMacro(SearchAndReplace.toString(), SearchAndReplace.getParams());
        
            SearchAndReplace.clearParams();
            SearchAndReplace.addParameter("[[QUESTION_NO]]");
            SearchAndReplace.addParameter(newSectionName);
            ooDocument.executeMacro(SearchAndReplace.toString(), SearchAndReplace.getParams());
        
            ExternalMacro insertHtmlDocumentIntoSection = ExternalMacroFactory.getMacroDefinition("InsertHTMLDocumentIntoSection");
            insertHtmlDocumentIntoSection.addParameter(newSectionName);
            insertHtmlDocumentIntoSection.addParameter(pathToFile+tmpFileName);
            insertHtmlDocumentIntoSection.addParameter(new String("question-text"));
            ooDocument.executeMacro(insertHtmlDocumentIntoSection.toString(), insertHtmlDocumentIntoSection.getParams() );
            
            MessageBox.OK(parent, "Finished Importing !");
            returnError(true);

        }   
        
    // End of variables declaration                      
            } catch (IOException ex) {
                    log.debug("InitQuestionBlock: " +ex.getMessage());
                 returnError(true);
            }
           
    }//GEN-LAST:event_btnApplyActionPerformed

    private void btnSelectQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectQuestionActionPerformed
// TODO add your handling code here:
        rqs = new registryQueryDialog("Select A Question", "Select * from questions", parent);
        rqs.show();
        log.debug("Moved on before closing child dialog");
        selectionData = rqs.getData();
        if (selectionData.size() > 0 ) {
            Set keyset = selectionData.keySet();
            log.debug("selected keyset size = " + keyset.size());
            txtQuestionTitle.setText(selectionData.get("QUESTION_TITLE"));
            txtAddressedTo.setText(selectionData.get("QUESTION_TO"));
            //resolve person name URI to registry entry
            dbInstance.Connect();
            QueryResults rs = dbInstance.QueryResults(GeneralQueryFactory.Q_FETCH_PERSON_BY_URI(selectionData.get("QUESTION_FROM")));
            dbInstance.EndConnect();
            String fullName = "";
            if (rs.hasResults()) {
                
                String[] firstName = rs.getSingleColumnResult("FIRST_NAME");
                String[] lastName = rs.getSingleColumnResult("LAST_NAME");
                if (firstName != null )
                    fullName = firstName[0];
                if (lastName != null ) 
                    fullName += " " + lastName[0];
                
            }
            txtPersonName.setText(fullName);
            
            //
            txtQuestionText.setText(selectionData.get("QUESTON_TEXT"));
            //fillDocument();
        } else {
            log.debug("selected keyset empty");
        }
    }//GEN-LAST:event_btnSelectQuestionActionPerformed

    private void fillDocument(){
           //check if section exists
           //if already exists, bail out with error message
           //else
           //create section with appropriate name
           //set section metadata
           //fill up respetive information on the document.
           String newSectionName = "";
           //must check for action type too, but for testing purposes ignored...
           newSectionName = theAction.action_naming_convention()+"-"+selectionData.get("ID");
           if (ooDocument.getTextSections().hasByName(newSectionName)) {
               MessageBox.OK("There is Question : " + selectionData.get("ID")+" has already been imported into the document!" );
               return;
           }
           //now create section
          ooDocument.addViewSection(newSectionName); 
        
    }
    public void setDialogMode(SelectorDialogModes mode) {
        theMode = mode;
        initFields();
    }

    public SelectorDialogModes getDialogMode() {
        return theMode;
    }

    public void setOOComponentHelper(OOComponentHelper ooComp) {
    }

    public void setToolbarAction(toolbarAction action) {
    }

    public void setParentDialog(JDialog dlg) {
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSelectQuestion;
    private javax.swing.JLabel lblNameOfPersonFrom;
    private javax.swing.JLabel lblQuestionAddressedTo;
    private javax.swing.JLabel lblQuestionText;
    private javax.swing.JLabel lblQuestionTitle;
    private javax.swing.JScrollPane scrollMessageArea;
    private javax.swing.JScrollPane scrollQuestionText;
    private javax.swing.JSeparator separatorLine1;
    private javax.swing.JTextField txtAddressedTo;
    private javax.swing.JTextArea txtMessageArea;
    private javax.swing.JTextField txtPersonName;
    private javax.swing.JTextArea txtQuestionText;
    private javax.swing.JTextField txtQuestionTitle;
    // End of variables declaration//GEN-END:variables
    
}
