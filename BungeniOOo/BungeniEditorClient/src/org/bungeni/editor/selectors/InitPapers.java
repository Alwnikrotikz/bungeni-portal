/*
 * InitQuestionBlock.java
 *
 * Created on August 31, 2007, 4:01 PM
 */

package org.bungeni.editor.selectors;

import com.sun.star.xml.AttributeData;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import org.bungeni.db.BungeniClientDB;
import org.bungeni.db.BungeniRegistryFactory;
import org.bungeni.db.DefaultInstanceFactory;
import org.bungeni.db.GeneralQueryFactory;
import org.bungeni.db.QueryResults;
import org.bungeni.db.SettingsQueryFactory;
import org.bungeni.db.registryQueryDialog;
import org.bungeni.editor.actions.toolbarAction;
import org.bungeni.editor.fragments.FragmentsFactory;
import org.bungeni.editor.macro.ExternalMacro;
import org.bungeni.editor.macro.ExternalMacroFactory;
import org.bungeni.ooo.OOComponentHelper;
import org.bungeni.utils.MessageBox;
import org.safehaus.uuid.UUID;
import org.safehaus.uuid.UUIDGenerator;

/**
 *
 * @author  Administrator
 */
public class InitPapers extends selectorTemplatePanel {
   
    registryQueryDialog rqs;
    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(InitPapers.class.getName());
 
    HashMap<String, ArrayList> selectionData = new HashMap<String,ArrayList>();
    /** Creates new form InitQuestionBlock */
    public InitPapers() {
        initComponents();
    }
    public InitPapers(OOComponentHelper ooDocument, JDialog parentDlg, toolbarAction theAction) {
        super(ooDocument, parentDlg, theAction);
        initComponents();
        initFields();
        initData();
        tbl_tabledDocs.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }
   
    private void initFields() {

        if (theMode == SelectorDialogModes.TEXT_INSERTION) {
            
            txtMessageArea.setText("You are attempting to insert a new Papers section, " +
                    "please select a title for the section, and the list of tabled documents");               
        } else if (theMode == SelectorDialogModes.TEXT_SELECTED) {
            txtMessageArea.setText("You are attempting to markup some existing text" +
                    " as a Papers section, " +
                    "please select the text you would like to markup , and press apply" +
                    "to markup the selected text with the correct speech metadata");
        }
    }
    
    private void initData() {
        dbInstance.Connect();
        QueryResults qr = dbInstance.QueryResults("select document_title, document_uri, document_date from tabled_documents");
        dbInstance.EndConnect();
        
        if (qr != null ) {
            if (qr.hasResults()) {
                Vector<Vector<String>> resultRows = new Vector<Vector<String>>();
                resultRows = qr.theResults();
              
                DefaultTableModel mdl = new DefaultTableModel();
                mdl.setDataVector(resultRows, qr.getColumnsAsVector());
                tbl_tabledDocs.setModel(mdl);
            }
        }
        
        
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        txt_title = new javax.swing.JTextField();
        lbl_title = new javax.swing.JLabel();
        btnApply = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        separatorLine1 = new javax.swing.JSeparator();
        scrollMessageArea = new javax.swing.JScrollPane();
        txtMessageArea = new javax.swing.JTextArea();
        lbl_tabledDocs = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_tabledDocs = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(348, 314));

        lbl_title.setText("Enter a title for the section");

        btnApply.setText("Apply");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        btnCancel.setText("Close");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        txtMessageArea.setBackground(new java.awt.Color(204, 204, 204));
        txtMessageArea.setColumns(20);
        txtMessageArea.setEditable(false);
        txtMessageArea.setFont(new java.awt.Font("Tahoma", 0, 11));
        txtMessageArea.setLineWrap(true);
        txtMessageArea.setRows(5);
        txtMessageArea.setWrapStyleWord(true);
        scrollMessageArea.setViewportView(txtMessageArea);

        lbl_tabledDocs.setText("Select Tabled Documents");

        tbl_tabledDocs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbl_tabledDocs);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, separatorLine1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(scrollMessageArea, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(lbl_title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 216, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txt_title, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .add(lbl_tabledDocs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(btnApply, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 99, Short.MAX_VALUE)
                        .add(btnCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(scrollMessageArea, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(separatorLine1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lbl_title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txt_title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lbl_tabledDocs)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnApply)
                    .add(btnCancel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
// TODO add your handling code here:
     returnError(false);
        if (tbl_tabledDocs.getSelectedRowCount() == 0) {
            MessageBox.OK(parent, "Please select a Tabled Document!");
            returnError(true);
            return;
        }
       if (txt_title.getText().trim().length() == 0 ) {
            MessageBox.OK(parent, "You must enter a title! ");
            returnError(true);
            return;
       }
      dbSettings.Connect();
      QueryResults qr = dbSettings.QueryResults(SettingsQueryFactory.Q_CHECK_IF_ACTION_HAS_PARENT(theAction.action_naming_convention()));
      dbSettings.EndConnect();
      String[] results = qr.getSingleColumnResult("THE_COUNT");
      if (results[0].equals("0")) {
        //no parent section
        if (!ooDocument.hasSection("root")) {
            MessageBox.OK(parent, "The document does not have a root section!");
            returnError(true);
            return;
        }  
      }
      
     int[] selectedRows = tbl_tabledDocs.getSelectedRows();
     ArrayList<String> docTitles = new ArrayList<String>();
     ArrayList<String> docURIs = new ArrayList<String>();
     
     for (int i=0; i < selectedRows.length; i++) {
         String docTitle = (String)tbl_tabledDocs.getModel().getValueAt(i, 0 );
         String docURI = (String) tbl_tabledDocs.getModel().getValueAt(i, 1);
         docTitles.add(docTitle);
         docURIs.add(docURI);
     }
     
    String[] arrDocTitles = docTitles.toArray(new String[docTitles.size()]); 
    String[] arrDocURI = docURIs.toArray(new String[docURIs.size()]);
    String targetSection = "";
    targetSection = theAction.getSelectedSectionToActUpon();
    ExternalMacro createSectionMacro;
    //now we need to check if the SelectSection resulted in a AFTER_SECTION or INSIDE_SECTION selection
    if (theAction.getSelectedSectionActionCommand().equals("INSIDE_SECTION")) {
        createSectionMacro = ExternalMacroFactory.getMacroDefinition("AddSectionInsideSection");
        createSectionMacro.addParameter(ooDocument.getComponent());
        createSectionMacro.addParameter(targetSection);
        createSectionMacro.addParameter(theAction.action_naming_convention());
    } else  /*** if (theAction.getSelectedSectionActionCommand().equals("AFTER_SECTION")) ***/ {
        createSectionMacro = ExternalMacroFactory.getMacroDefinition("InsertSectionAfterSection");
        createSectionMacro.addParameter(ooDocument.getComponent());
        createSectionMacro.addParameter(theAction.action_naming_convention());
        createSectionMacro.addParameter(targetSection);
        
    }
    /***
    ExternalMacro AddSectionInsideSection = ExternalMacroFactory.getMacroDefinition("AddSectionInsideSection");
    AddSectionInsideSection.addParameter(ooDocument.getComponent());
    AddSectionInsideSection.addParameter("root");
    AddSectionInsideSection.addParameter(theAction.action_naming_convention());
     ****/
    ooDocument.executeMacro(createSectionMacro.toString(), createSectionMacro.getParams());
    
    
    
    ExternalMacro insertDocIntoSection = ExternalMacroFactory.getMacroDefinition("InsertDocumentIntoSection");
    insertDocIntoSection.addParameter(ooDocument.getComponent());
    insertDocIntoSection.addParameter(theAction.action_naming_convention())   ;
    insertDocIntoSection.addParameter(FragmentsFactory.getFragment("hansard_papers"));
    ooDocument.executeMacro(insertDocIntoSection.toString(), insertDocIntoSection.getParams());
          
    ExternalMacro searchAndReplace = ExternalMacroFactory.getMacroDefinition("SearchAndReplace");
    searchAndReplace.addParameter(ooDocument.getComponent());
    searchAndReplace.addParameter(new String("[[PAPER_TITLE]]"));
    searchAndReplace.addParameter(txt_title.getText());
    ooDocument.executeMacro(searchAndReplace.toString(), searchAndReplace.getParams());
    
    ExternalMacro insertArrayAsBulletList = ExternalMacroFactory.getMacroDefinition("InsertArrayAsBulletList");
    insertArrayAsBulletList.addParameter(new String("begin_tabled_documents_list"));
    insertArrayAsBulletList.addParameter(arrDocTitles);
    insertArrayAsBulletList.addParameter(arrDocURI);
    ooDocument.executeMacro(insertArrayAsBulletList.toString(), insertArrayAsBulletList.getParams());
    //MessageBox.OK(parent, "Paper details have been imported !");
    returnError(true);
    parent.dispose();
    }//GEN-LAST:event_btnApplyActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
// TODO add your handling code here:
        parent.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void returnError(boolean state) {
        btnApply.setEnabled(state);
        btnCancel.setEnabled(state);
   }
    private void fillDocument(){
        
    }
    public void setDialogMode(SelectorDialogModes mode) {
        theMode = mode;
        initFields();
    }

    public SelectorDialogModes getDialogMode() {
        return theMode;
    }

    public void setOOComponentHelper(OOComponentHelper ooComp) {
    }

    public void setToolbarAction(toolbarAction action) {
    }

    public void setParentDialog(JDialog dlg) {
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnCancel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_tabledDocs;
    private javax.swing.JLabel lbl_title;
    private javax.swing.JScrollPane scrollMessageArea;
    private javax.swing.JSeparator separatorLine1;
    private javax.swing.JTable tbl_tabledDocs;
    private javax.swing.JTextArea txtMessageArea;
    private javax.swing.JTextField txt_title;
    // End of variables declaration//GEN-END:variables
    
}
