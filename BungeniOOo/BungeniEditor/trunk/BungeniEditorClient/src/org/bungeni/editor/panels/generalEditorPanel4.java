/*
 * generalEditorPanel4.java
 *
 * Created on September 8, 2007, 4:49 PM
 */

package org.bungeni.editor.panels;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.net.URL;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreePath;
import org.bungeni.db.BungeniClientDB;
import org.bungeni.db.DefaultInstanceFactory;
import org.bungeni.db.QueryResults;
import org.bungeni.db.SettingsQueryFactory;
import org.bungeni.editor.actions.EditorActionFactory;
import org.bungeni.editor.actions.IEditorActionEvent;
import org.bungeni.editor.actions.toolbarAction;
import org.bungeni.editor.actions.toolbarSubAction;
import org.bungeni.editor.selectors.SelectorDialogModes;
import org.bungeni.ooo.OOComponentHelper;
import org.bungeni.utils.CommonTreeFunctions;

/**
 *
 * @author  Administrator
 */
public class generalEditorPanel4 extends templatePanel implements ICollapsiblePanel , ActionListener {

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(generalEditorPanel4.class.getName());
    private OOComponentHelper ooDocument;    
    private BungeniClientDB instance;
    
    private DefaultMutableTreeNode root;
  //  private DefaultMutableTreeNode[] visibleActionRoots;
    private JPopupMenu popupMenu;
    
    private  enum PopupTypeIdentifier {CREATE_EDIT , APPLY_MARKUP, EDIT, SELECT_INSERT, SELECT_EDIT  };
 
    private HashMap<PopupTypeIdentifier, String> popupMap = new HashMap<PopupTypeIdentifier, String>();
    private String property_ActiveDocumentMode = "";
    /** Creates new form generalEditorPanel4 */
    public generalEditorPanel4() {
        log.debug("in constructor initComponents");
        initComponents();
        property_ActiveDocumentMode = org.bungeni.editor.BungeniEditorProperties.getEditorProperty("activeDocumentMode");
        log.debug("in constructor initOthers");
        initOthers();
        log.debug("in constructor initTree");
        initTree();
        
        
     }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        generalEditorScrollPane = new javax.swing.JScrollPane();
        treeGeneralEditor = new javax.swing.JTree();

        treeGeneralEditor.setFont(new java.awt.Font("Tahoma", 0, 12));
        generalEditorScrollPane.setViewportView(treeGeneralEditor);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(generalEditorScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(generalEditorScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void initOthers(){
        instance = new BungeniClientDB (DefaultInstanceFactory.DEFAULT_INSTANCE(), DefaultInstanceFactory.DEFAULT_DB());
        popupMenu = new JPopupMenu();
        
        popupMap.put(PopupTypeIdentifier.APPLY_MARKUP, "Apply Markup");
        popupMap.put(PopupTypeIdentifier.CREATE_EDIT, "Create Section");
        popupMap.put(PopupTypeIdentifier.EDIT, "Edit Section");
        popupMap.put(PopupTypeIdentifier.SELECT_EDIT, "Edit Selection");
        popupMap.put(PopupTypeIdentifier.SELECT_INSERT, "Markup Selection");
        
    }
    
    private void initTree() {
        try {
        toolbarAction rootAction = new toolbarAction("rootAction");
        toolbarAction inivisibleRoot = new toolbarAction("invisibleRootAction");
        toolbarAction selectionAction = new toolbarAction("selectionAction");
        
        root = new DefaultMutableTreeNode(inivisibleRoot);
        DefaultMutableTreeNode editorToolsRoot = new DefaultMutableTreeNode(rootAction);
        DefaultMutableTreeNode editorSelectionToolsRoot = new DefaultMutableTreeNode(selectionAction);
        root.add(editorToolsRoot);
        root.add(editorSelectionToolsRoot);
        
        log.debug("in InitTree");
        if (instance.Connect()) {
            log.debug("about to call createTreeNodes()");
            //create editor tools nodes
            createTreeNodes( editorToolsRoot, true);
            createSelectionNodes(editorSelectionToolsRoot, true);
            //createToolNodes(rootNode, rootAction, instance );
            instance.EndConnect();
        } 
        log.debug("after createTreeNodes()");
        treeGeneralEditor.setModel(new DefaultTreeModel(root));
        treeGeneralEditor.addMouseListener(new treeGeneralEditorMouseListener());
        treeGeneralEditor.setCellRenderer(new treeGeneralEditorCellRenderer());
        CommonTreeFunctions.expandAll(treeGeneralEditor, true);
        treeGeneralEditor.setRootVisible(false);
        } catch (Exception ex) {
            log.error("InitTree: exception: " + ex.getMessage());
            log.error("InitTree: stacktrace : " + org.bungeni.utils.CommonExceptionUtils.getStackTrace(ex));
        }
    }
    
    private void createSelectionNodes(DefaultMutableTreeNode rootNode, boolean recurse) {
        try {
        toolbarAction baseNode = (toolbarAction) rootNode.getUserObject();
        String actionParent = baseNode.action_name();
        Vector<Vector<String>> resultRows = new Vector<Vector<String>>();
        QueryResults query_results;
        query_results = instance.QueryResults(SettingsQueryFactory.Q_FETCH_ZERO_LEVEL_SELECTION_ACTIONS(this.property_ActiveDocumentMode));
        log.debug("createSelectionNodes, query = " + SettingsQueryFactory.Q_FETCH_ZERO_LEVEL_SELECTION_ACTIONS(this.property_ActiveDocumentMode));
        if (query_results == null) 
            return ;
        
        if (query_results.hasResults() ) {
             HashMap columns = query_results.columnNameMap();
             //child actions are present
             //call the result nodes recursively...
             resultRows = query_results.theResults();
             for (int i = 0 ; i < resultRows.size(); i++ ) {
                   //get the results row by row into a string vector
                   Vector<java.lang.String> tableRow = new Vector<java.lang.String>();
                   tableRow = resultRows.elementAt(i);
                   toolbarSubAction subAction = new toolbarSubAction(tableRow, columns);
                   //String displayText = tableRow.elementAt((Integer)columns.get("ACTION_DISPLAY_TEXT") -1 );
                   log.debug("createSelectionNodes : "+ subAction.toString());
                   DefaultMutableTreeNode node = new DefaultMutableTreeNode(subAction);
                   //add child actions to this parent selection action 
                   addSelectionActionChildNodes(node);
                   rootNode.add(node);
               }
        }
        } catch (Exception ex) {
            log.error ("createSelecitonNodes, Exception : "+ ex.getMessage());
            log.error("createSelecitonNodes, StackTrace : "+ org.bungeni.utils.CommonExceptionUtils.getStackTrace(ex));
        }
    }
   
    private void addSelectionActionChildNodes(DefaultMutableTreeNode parentSelectionNode) {
        toolbarSubAction parentSubAction = (toolbarSubAction) parentSelectionNode.getUserObject();
        String query = SettingsQueryFactory.Q_FETCH_CHILDREN_SELECTION_ACTIONS(this.property_ActiveDocumentMode, parentSubAction.parent_action_name());
        QueryResults qr = instance.QueryResults(query);
        Vector<Vector<String>> resultRows = new Vector<Vector<String>>();
       
        if (qr == null ) return;
        if (qr.hasResults()) {
            HashMap columns = qr.columnNameMap();
            resultRows = qr.theResults();
            for (int i = 0; i < resultRows.size(); i++) {
                   //get the results row by row into a string vector
                   Vector<java.lang.String> tableRow = new Vector<java.lang.String>();
                   tableRow = resultRows.elementAt(i);
                   toolbarSubAction subAction = new toolbarSubAction(tableRow, columns);
                   DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(subAction);
                   parentSelectionNode.add(childNode);
            }
        }
        
        return;
    }
    
    private void createTreeNodes(DefaultMutableTreeNode rootNode, boolean recurse) {
        try {
        toolbarAction baseNode = (toolbarAction) rootNode.getUserObject();
        String actionParent = baseNode.action_name();
        //HashMap results = new HashMap();
        Vector<Vector<String>> resultRows = new Vector<Vector<String>>();
       // Vector<Vector> results = new Vector<Vector>();
        //DefaultMutableTreeNode child = new DefaultMutableTreeNode (addThisActionObject);
        
        //addToThisNode.add( child);
        QueryResults query_results;
        if (actionParent.equals("editor_root")) {
            log.debug("createTreeNodes: "+ SettingsQueryFactory.Q_FETCH_PARENT_ACTIONS());
            query_results = instance.QueryResults(SettingsQueryFactory.Q_FETCH_PARENT_ACTIONS());
        } else {
            log.debug("createTreeNodes: "+SettingsQueryFactory.Q_FETCH_PARENT_ACTIONS(actionParent));
            query_results = instance.QueryResults(SettingsQueryFactory.Q_FETCH_PARENT_ACTIONS(actionParent));
        }
        //QueryResults query_results = instance.QueryResults(SettingsQueryFactory.Q_FETCH_CHILD_TOOLBAR_ACTIONS(actionParent));
        //QueryResults query_results = new QueryResults(results);
        if (query_results == null) 
            return ;
        
        if (query_results.hasResults() ) {
             HashMap columns = query_results.columnNameMap();
             //child actions are present
             //call the result nodes recursively...
             resultRows = query_results.theResults();
             //toolbarActionGroup grp = new toolbarActionGroup("create a section", "create a section");
                 for (int i = 0 ; i < resultRows.size(); i++ ) {
                   //get the results row by row into a string vector
                   Vector<java.lang.String> tableRow = new Vector<java.lang.String>();
                   tableRow = resultRows.elementAt(i);
                   toolbarAction action = new toolbarAction(tableRow, columns );
                   DefaultMutableTreeNode node = new DefaultMutableTreeNode(action);
                   rootNode.add(node);
                   if (recurse ) {
                       createTreeNodes(node, true);
                   }
               }
        }
        } catch (Exception ex) {
            log.error("Exception in createTreeNodes: " + ex.getMessage());
            ex.printStackTrace();
        }
      return ;
    }
    
    public void setOOComponentHandle(OOComponentHelper ooComponent) {
        ooDocument = ooComponent;
    }

    public Component getObjectHandle() {
        return this;
    }

    public IEditorActionEvent getEventClass(toolbarAction action) {
        IEditorActionEvent event = EditorActionFactory.getEventClass(action);
        return event;
    }

    public IEditorActionEvent getEventClass(toolbarSubAction subAction) {
       IEditorActionEvent event = EditorActionFactory.getEventClass(subAction);
        return event;
    }
    
    public void setParentWindowHandle(Component c) {
    }

    public void actionPerformed(ActionEvent e) {
    }

   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane generalEditorScrollPane;
    private javax.swing.JTree treeGeneralEditor;
    // End of variables declaration//GEN-END:variables
    
    
    class treePopupMenuAction extends AbstractAction {
        PopupTypeIdentifier treePopupMenuAction_popupType;
        
        public treePopupMenuAction (toolbarAction action) {
            super(action.toString());
            putValue("USER_OBJECT", action);
        }
        
        public treePopupMenuAction (String actionText,  toolbarAction action, PopupTypeIdentifier id ) {
            super(actionText);
            putValue("POPUP_IDENTIFIER", id);
            putValue("USER_OBJECT", action);
            treePopupMenuAction_popupType = id;
        }
     
        public treePopupMenuAction (String actionText,  toolbarSubAction action, PopupTypeIdentifier id ) {
            super(actionText);
            putValue("POPUP_IDENTIFIER", id);
            putValue("USER_OBJECT", action);
            treePopupMenuAction_popupType = id;
        }
     
        
        
        public void actionPerformed(ActionEvent e) {
            //toolbarAction action = (toolbarAction) e.getSource();
            //System.out.println("action = " + action.toString());
               String s = ( "    Event source: " + e.getSource()
                  + "\n");
                log.debug("popup, actionPerforemd : "+ s);
               Object value = this.getValue("USER_OBJECT");
               Object popId = this.getValue("POPUP_IDENTIFIER");
               if (value == null ) {
                   log.debug("actionPerformed, popupmenu selection null value of object");
                   return;
               }
               if (value.getClass() == org.bungeni.editor.actions.toolbarAction.class ) {
                   toolbarAction action = (toolbarAction)value;
                   PopupTypeIdentifier popType = (PopupTypeIdentifier) popId;
                   processPopupSelection(action, popType);
               } 
               else if ( value.getClass() == org.bungeni.editor.actions.toolbarSubAction.class) {
                   toolbarSubAction subAction = (toolbarSubAction) value;
                   PopupTypeIdentifier popType= (PopupTypeIdentifier) popId;
                   processPopupSelection(subAction, popType);
               }
               if (value != null ) {
                   log.debug("popup, actionPerforemd : popupSelection");
                
                   processPopupSelection();
               }
        }

        private SelectorDialogModes getDialogMode(){
          //warning text_select mode needs to be handled...
           if ( treePopupMenuAction_popupType == PopupTypeIdentifier.CREATE_EDIT) {
                    return SelectorDialogModes.TEXT_INSERTION;
           }
           if (treePopupMenuAction_popupType ==  PopupTypeIdentifier.EDIT){
                    return SelectorDialogModes.TEXT_EDIT;
           }
           if (treePopupMenuAction_popupType ==  PopupTypeIdentifier.SELECT_EDIT){
                    return SelectorDialogModes.TEXT_SELECTED_EDIT;
           }
           if (treePopupMenuAction_popupType ==  PopupTypeIdentifier.SELECT_INSERT){
                    return SelectorDialogModes.TEXT_SELECTED_INSERT;
           }
           return SelectorDialogModes.NONE;
        }    
        
        private void processPopupSelection (toolbarAction action, PopupTypeIdentifier popId) {
            //{CREATE_EDIT , APPLY_MARKUP, EDIT, SELECT_INSERT, SELECT_EDIT  };
               if (popId == PopupTypeIdentifier.CREATE_EDIT) {
                   // toolbarAction action =(toolbarAction)thisNode.getUserObject();
                    /** commented for issue 108 ***
                    if (!ooDocument.isTextSelected())
                        action.setSelectorDialogMode(SelectorDialogModes.TEXT_INSERTION);
                    else
                        action.setSelectorDialogMode(SelectorDialogModes.TEXT_SELECTED);
                     */
                    action.setSelectorDialogMode(this.getDialogMode());
                    IEditorActionEvent event = getEventClass(action);
                    event.doCommand(ooDocument, action);
              } else
               if (popId == PopupTypeIdentifier.EDIT) {
                    //look for existing masthead section 
                    //if it exists popup the edit screen for it.
                    //toolbarAction action =(toolbarAction)thisNode.getUserObject();
                    //we look for sections matching this action type.
                    action.setSelectorDialogMode(this.getDialogMode());
                    IEditorActionEvent event = getEventClass(action);
                    event.doCommand(ooDocument, action);
               } else 
              if (popId == PopupTypeIdentifier.APPLY_MARKUP) {
                    action.setSelectorDialogMode(this.getDialogMode());
                    IEditorActionEvent event = getEventClass(action);
                    event.doCommand(ooDocument, action);
              }
        }
        
        private void processPopupSelection (toolbarSubAction action, PopupTypeIdentifier popId) {
            if (popId == PopupTypeIdentifier.SELECT_EDIT){
                action.setSelectorDialogMode(this.getDialogMode());
                IEditorActionEvent event = getEventClass(action);
                event.doCommand(ooDocument, action);
            } else 
             if (popId == PopupTypeIdentifier.SELECT_INSERT) {
                action.setSelectorDialogMode(this.getDialogMode());
                IEditorActionEvent event = getEventClass(action);
                event.doCommand(ooDocument, action);
             }
        }
        
        
        
        private void processPopupSelection(){
            //get selction path
              TreePath path = treeGeneralEditor.getSelectionPath();
              //get current node selected...
              DefaultMutableTreeNode thisNode = (DefaultMutableTreeNode) path.getLastPathComponent();
              if (treePopupMenuAction_popupType == PopupTypeIdentifier.CREATE_EDIT) {
                    toolbarAction action =(toolbarAction)thisNode.getUserObject();
                    /** commented for issue 108 ***
                    if (!ooDocument.isTextSelected())
                        action.setSelectorDialogMode(SelectorDialogModes.TEXT_INSERTION);
                    else
                        action.setSelectorDialogMode(SelectorDialogModes.TEXT_SELECTED);
                     */
                    action.setSelectorDialogMode(this.getDialogMode());
                    IEditorActionEvent event = getEventClass(action);
                    event.doCommand(ooDocument, action);
              } else
               if (treePopupMenuAction_popupType == PopupTypeIdentifier.EDIT) {
                    //look for existing masthead section 
                    //if it exists popup the edit screen for it.
                    toolbarAction action =(toolbarAction)thisNode.getUserObject();
                    //we look for sections matching this action type.
                    action.setSelectorDialogMode(this.getDialogMode());
                    IEditorActionEvent event = getEventClass(action);
                    event.doCommand(ooDocument, action);
               }
              /*else 
              if (popupType == PopupTypeIdentifier.VIEW_ACTIONS) {
                   if (thisNode.isLeaf()) {
                      log.debug("processPopupSelection : thisNode = leaf");
                    instance.Connect();
                    createTreeNodes(thisNode, false);
                    instance.EndConnect();
                    if (!thisNode.isLeaf()) {
                     treeGeneralEditor.expandPath(path);
                    } 
                  }
              }*/ else 
              if (treePopupMenuAction_popupType == PopupTypeIdentifier.APPLY_MARKUP) {
                    toolbarAction action =(toolbarAction)thisNode.getUserObject();
                    action.setSelectorDialogMode(this.getDialogMode());
                    IEditorActionEvent event = getEventClass(action);
                    event.doCommand(ooDocument, action);
              }
                //get toolbar action     
              //toolbarAction action = (toolbarAction) thisNode.getUserObject();
              //add items only if it is a leaf node

        }
        
 
    }
    

    
    class treeGeneralEditorMouseListener implements MouseListener {
      
        public void mouseClicked(MouseEvent evt) {
      
        }
       
       private void createPopupMenuItems(toolbarSubAction subAction) {
           // throw new UnsupportedOperationException("Not yet implemented");
            popupMenu.removeAll(); 
            if (subAction.sub_action_order().equals("0"))  {
                 popupMenu.add(new treePopupMenuAction(popupMap.get(PopupTypeIdentifier.SELECT_INSERT), subAction, PopupTypeIdentifier.SELECT_INSERT));
            } else {
                 popupMenu.add(new treePopupMenuAction(popupMap.get(PopupTypeIdentifier.SELECT_INSERT), subAction, PopupTypeIdentifier.SELECT_INSERT));
                 popupMenu.add(new treePopupMenuAction(popupMap.get(PopupTypeIdentifier.SELECT_EDIT) , subAction, PopupTypeIdentifier.SELECT_INSERT));              
            }
        } 
        
       private void createPopupMenuItems (toolbarAction baseNodeAction){
           //do not generate menu for top level actions 
           if (baseNodeAction.isTopLevelAction()) return ;
            
            if (baseNodeAction.action_type().equals("section")) {
                popupMenu.removeAll();
                //popupMenu.add(new treePopupMenuAction(popup_section_actions[0], baseNodeAction, PopupTypeIdentifier.VIEW_ACTIONS));
                popupMenu.add(new treePopupMenuAction(popupMap.get(PopupTypeIdentifier.CREATE_EDIT), baseNodeAction, PopupTypeIdentifier.CREATE_EDIT));
                if (baseNodeAction.action_edit_dlg_allowed() == 1)
                    popupMenu.add(new treePopupMenuAction(popupMap.get(PopupTypeIdentifier.EDIT), baseNodeAction, PopupTypeIdentifier.EDIT));
                //popupMenu.add(new treePopupMenuAction(popup_section_actions[2]))
            } else 
            if (baseNodeAction.action_type().equals("markup")) {
                popupMenu.removeAll();
                popupMenu.add(new treePopupMenuAction(popupMap.get(PopupTypeIdentifier.APPLY_MARKUP), baseNodeAction, PopupTypeIdentifier.APPLY_MARKUP));
            }
         }
       
       public void mousePressed(MouseEvent evt) {
         
                //we dont want to process right click
                if (SwingUtilities.isRightMouseButton(evt)) {
                    log.debug("mousePressed: Ignore right clicks");
                    return;
                }
                
                int selRow = treeGeneralEditor.getRowForLocation(evt.getX(), evt.getY());
                
                TreePath selPath = treeGeneralEditor.getPathForLocation(evt.getX(), evt.getY());
                if (selRow == -1 ) return ; //dont process invalid clicks on tree nodes
                //get the tree node and filter on userObject() 
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) selPath.getLastPathComponent();
                Object obj = node.getUserObject();
                if (obj.getClass() == org.bungeni.editor.actions.toolbarSubAction.class ) {
                         toolbarSubAction subAction = null;
                           subAction = (toolbarSubAction) obj; 
                           if (subAction != null ) {
                               createPopupMenuItems(subAction);
                               popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
                           }
                } else 
                if (obj.getClass() == org.bungeni.editor.actions.toolbarAction.class ) {
                        toolbarAction action = null;
                        action = (toolbarAction) obj;
                        if (action != null) {
                            if (!action.isTopLevelAction()) {
                                createPopupMenuItems (action);
                                popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
                            }
                        }       
                } 
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }

      
        
    }

class treeGeneralEditorCellRenderer extends JLabel implements TreeCellRenderer {
        
        ImageIcon[] imgIcons;
         int SECTION_ICON = 0;
         int SECTION_PLUS_ICON = 1;
         int MARKUP_ICON = 2;
         int TOPLEVEL_ICON=3;
        String[] icons = { "action_m.png", "action_m_plus.png", "action_s.png", "icon_17x20.png" };
        
        public treeGeneralEditorCellRenderer() {
              imgIcons = new ImageIcon[icons.length];
              for (int i=0; i < imgIcons.length ; i++) {
                  String imgPath = "/gui/" + icons[i] ;
                    URL imgUrl = null;
                  imgUrl = getClass().getResource(imgPath);
                  imgIcons[i] = new ImageIcon(imgUrl, "");
              }
        }
        private int ACTION_OBJECT=0, SELECTION_OBJECT=1;
        
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
                int objectType = -1;
                try {
                    if (selected) 
                      setOpaque(true);
                    else
                      setOpaque(false);
               
                    Object userObj;
                    //only if its a defaultmutabletreenode
                    if (!(value instanceof DefaultMutableTreeNode)) {
                        log.debug("renderTreeComponent: not a defaultMutabletreenode");
                        return this;
                    }
                    DefaultMutableTreeNode uo = (DefaultMutableTreeNode)value;
                    //first check the object type
                    userObj = uo.getUserObject();
                    //for selection object the node user object is always a string
                    //if (userObj.getClass() == java.lang.String.class) 
                    //     objectType = this.SELECTION_OBJECT;
                    if (userObj.getClass() == org.bungeni.editor.actions.toolbarSubAction.class) 
                         objectType = this.SELECTION_OBJECT;
                    else if (userObj.getClass() == org.bungeni.editor.actions.toolbarAction.class) 
                         objectType = this.ACTION_OBJECT;
                  
                  
                    if (objectType == -1 ) {
                      log.debug("getTreeCellRenderComponent exception");
                      return this;
                    }
                    // if (uo.isLeaf()) {
                    if (this.SELECTION_OBJECT == objectType) {
                          log.debug("treeCellRenderer: user Object is a string... ");
                          setIcon(null);
                          toolbarSubAction subAction = (toolbarSubAction)userObj;
                          log.debug("treeCellRenderer: " + subAction.toString());
                          setText(" "+ subAction.action_display_text());
                        // return this;
                    } else if (this.ACTION_OBJECT == objectType) {
                          toolbarAction act = (toolbarAction) userObj;
                          //just to make sure a null object is not returned
                          if (act == null ) { 
                              log.debug("treeCellRenderer: action object is null");  
                              return this;
                          } 
                          setText(act.action_display_text());
                          //action_type is not valid for the invisibleRoot, editorRoot or the selectionRoot
                          //we need to filter by action name
                          if (act.isTopLevelAction() ) {
                                setIcon(imgIcons[TOPLEVEL_ICON]);
                          } else {
                              if (act.action_type().equals("markup")) 
                                setIcon(imgIcons[MARKUP_ICON]);
                              else 
                                setIcon(imgIcons[SECTION_ICON]);
                          }
                    }       
                  //} else {
                  //    setIcon(imgIcons[SECTION_PLUS_ICON]);
                  //}
                
                
                } catch (Exception ex) {
                    log.error("cellRender error: " + ex.getMessage());
                    log.error("cellRender stackTrace: "+ org.bungeni.utils.CommonExceptionUtils.getStackTrace(ex));
                } finally {
                return this;
                }
    }    
        

       }        

}
